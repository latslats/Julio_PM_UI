This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **.xml, **.db, docs/**, frontend/node_modules/**, backend/node_modules/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
backend/
  routes/
    projects.js
    tasks.js
    timeEntries.js
  database.js
  Dockerfile
  package.json
  server.js
frontend/
  src/
    components/
      layouts/
        MainLayout.jsx
      navigation/
        Header.jsx
        Sidebar.jsx
      projects/
        ProjectCard.jsx
      tasks/
        TaskItem.jsx
      timeTracking/
        TimeTrackingWidget.jsx
    context/
      ProjectContext.jsx
    pages/
      Dashboard.jsx
      NotFound.jsx
      ProjectDetail.jsx
      Projects.jsx
      Reports.jsx
      TimeTracking.jsx
    App.jsx
    index.css
    main.jsx
  Dockerfile
  index.html
  nginx.conf
  package.json
  postcss.config.js
  tailwind.config.js
  vite.config.js
.clinerules
.windsurfrules
.windsurfrules_old
docker-compose.yml
project.spec
README.md
repomix.config.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".windsurfrules_old">
## Role
You are a **senior front-end developer**.

## Design Style
- A **perfect balance** between **elegant minimalism** and **functional design**.
- **Soft, refreshing gradient colors** that seamlessly integrate with the brand palette.
- **Well-proportioned white space** for a clean layout.
- **Light and immersive** user experience.
- **Clear information hierarchy** using **subtle shadows and modular card layouts**.
- **Natural focus** on core functionalities.
- **Refined rounded corners**.
- **Delicate micro-interactions**.
- **Comfortable visual proportions**.
- **Accent Colors** chosen based on the app type

## Technical Specifications
1. **Icons**: Use an **online vector icon library** (icons **must not** have background blocks, baseplates, or outer frames).
2. **Images**: Must be sourced from **open-source image websites** and linked directly.
3. **Styles**: Use **Tailwind CSS** via **CDN** for styling.
4. **Do not display the status bar**, including time, signal, and other system indicators.
5. **All text should be only black or white**.

## Task
This is an **web application that allows users to manage their projects and tasks nested in projects, timetrack time spent. In a clean effective, enticing and creative way**.
- Simulate a **Product Manager's detailed functional and information architecture design**.
- Follow the **design style** and **technical specifications** to generate a complete **UI design plan**.
- Create a **UI.html** file that contains all pages displayed in a **horizontal layout**.

## Tech Stack
- **Frontend**: React.js
- **Backend**: Node.js with Express
- **Database**: PostgreSQL
- **Containerization**: Docker
- **Styling**: Tailwind CSS (via CDN)

## Usage Tips
- **Consistency is Key**: Apply the `Design Style` and `Technical Specifications` consistently across all components and pages.
- **Component-Based Design**: Break down complex features into smaller, reusable UI components adhering to the defined style.
- **Focus on Core Functionality**: Prioritize implementing the core features described in the [Task]section before adding secondary elements.
- **Iterative Refinement**: Use these rules as a guideline and refine the UI iteratively based on the specific needs of each feature or page.
</file>

<file path="backend/server.js">
const express = require('express');
const cors = require('cors');
const db = require('./database.js'); // Import the database connection
const projectRoutes = require('./routes/projects'); // Import project routes
const taskRoutes = require('./routes/tasks'); // Import task routes
const timeEntryRoutes = require('./routes/timeEntries'); // Import time entry routes
const app = express();
// Middleware
app.use(cors()); // Enable CORS for all origins
app.use(express.json()); // Enable parsing JSON request bodies
// Basic Route
app.get('/', (req, res) => {
  res.json({ message: 'TaskFlow API is running!' });
});
// Mount API Routes
app.use('/api/projects', projectRoutes); // Use project routes
app.use('/api/tasks', taskRoutes); // Use task routes
app.use('/api/time-entries', timeEntryRoutes); // Use time entry routes
// Error Handling Middleware (Basic)
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Something went wrong!', error: err.message });
});
// Start Server
const PORT = process.env.PORT || 5001; // Use a different port than the frontend (usually 5173 or 3000)
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
</file>

<file path="frontend/src/components/layouts/MainLayout.jsx">
import { Outlet } from 'react-router-dom'
import Sidebar from '../navigation/Sidebar'
import Header from '../navigation/Header'
import { useState } from 'react'
const MainLayout = () => {
  const [sidebarOpen, setSidebarOpen] = useState(true)
  return (
    <div className="flex h-screen bg-gradient-to-br from-secondary-50 to-primary-50">
      <Sidebar isOpen={sidebarOpen} toggleSidebar={() => setSidebarOpen(!sidebarOpen)} />
      <div className="flex-1 flex flex-col overflow-hidden">
        <Header toggleSidebar={() => setSidebarOpen(!sidebarOpen)} />
        <main className="flex-1 overflow-y-auto p-4 md:p-6">
          <div className="max-w-7xl mx-auto">
            <Outlet />
          </div>
        </main>
      </div>
    </div>
  )
}
export default MainLayout
</file>

<file path="frontend/src/components/navigation/Header.jsx">
import { useState } from 'react'
import { FiMenu, FiSearch } from 'react-icons/fi'
const Header = ({ toggleSidebar }) => {
  return (
    <header className="bg-white shadow-soft z-10">
      <div className="px-4 sm:px-6 lg:px-8 py-3 flex items-center justify-between">
        <div className="flex items-center">
          <button 
            onClick={toggleSidebar}
            className="p-2 rounded-lg text-secondary-500 hover:bg-secondary-100 focus:outline-none"
          >
            <FiMenu className="h-6 w-6" />
          </button>
          <div className="ml-4 relative max-w-xs w-full hidden md:block">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiSearch className="h-5 w-5 text-secondary-400" />
              </div>
              <input
                type="text"
                placeholder="Search..."
                className="block w-full pl-10 pr-3 py-2 border border-secondary-200 rounded-lg text-sm placeholder-secondary-400 focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent"
              />
            </div>
          </div>
        </div>
        <div className="flex items-center">
          <div className="h-8 w-8 rounded-full bg-gradient-to-r from-primary-400 to-accent-400"></div>
        </div>
      </div>
    </header>
  )
}
export default Header
</file>

<file path="frontend/src/components/navigation/Sidebar.jsx">
import { NavLink } from 'react-router-dom'
import { FiHome, FiFolder, FiClock, FiBarChart2, FiSettings, FiX } from 'react-icons/fi'
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const navItems = [
    { name: 'Dashboard', path: '/', icon: <FiHome className="w-5 h-5" /> },
    { name: 'Projects', path: '/projects', icon: <FiFolder className="w-5 h-5" /> },
    { name: 'Time Tracking', path: '/time-tracking', icon: <FiClock className="w-5 h-5" /> },
    { name: 'Reports', path: '/reports', icon: <FiBarChart2 className="w-5 h-5" /> },
    { name: 'Settings', path: '/settings', icon: <FiSettings className="w-5 h-5" /> },
  ]
  return (
    <>
      {/* Mobile sidebar backdrop */}
      {isOpen && (
        <div 
          className="fixed inset-0 z-20 bg-black bg-opacity-50 lg:hidden"
          onClick={toggleSidebar}
        ></div>
      )}
      {/* Sidebar */}
      <aside
        className={`fixed inset-y-0 left-0 z-30 w-64 bg-white shadow-medium transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:h-screen ${
          isOpen ? 'translate-x-0' : '-translate-x-full'
        }`}
      >
        <div className="h-full flex flex-col">
          {/* Sidebar header */}
          <div className="h-16 flex items-center justify-between px-4 border-b border-secondary-100">
            <div className="flex items-center">
              <div className="h-8 w-8 rounded-lg bg-gradient-to-r from-primary-500 to-accent-500"></div>
              <span className="ml-2 text-xl font-semibold text-secondary-900">TaskFlow</span>
            </div>
            <button 
              onClick={toggleSidebar}
              className="p-2 rounded-lg text-secondary-500 hover:bg-secondary-100 focus:outline-none lg:hidden"
            >
              <FiX className="h-5 w-5" />
            </button>
          </div>
          {/* Navigation */}
          <nav className="flex-1 px-2 py-4 space-y-1 overflow-y-auto">
            {navItems.map((item) => (
              <NavLink
                key={item.path}
                to={item.path}
                className={({ isActive }) =>
                  `flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${
                    isActive
                      ? 'bg-primary-50 text-primary-700'
                      : 'text-secondary-700 hover:bg-secondary-50'
                  }`
                }
              >
                <span className="mr-3">{item.icon}</span>
                <span>{item.name}</span>
              </NavLink>
            ))}
          </nav>
          {/* Sidebar footer */}
          <div className="p-4 border-t border-secondary-100">
            <div className="bg-secondary-50 rounded-xl p-3">
              <h3 className="text-sm font-medium text-secondary-900">Need help?</h3>
              <p className="mt-1 text-xs text-secondary-600">
                Check our documentation or contact support for assistance.
              </p>
              <button className="mt-2 w-full px-3 py-1.5 text-xs font-medium text-white bg-primary-500 rounded-lg hover:bg-primary-600 focus:outline-none">
                View Documentation
              </button>
            </div>
          </div>
        </div>
      </aside>
    </>
  )
}
export default Sidebar
</file>

<file path="frontend/src/components/projects/ProjectCard.jsx">
import { Link } from 'react-router-dom'
import { FiClock, FiCheckCircle } from 'react-icons/fi'
const ProjectCard = ({ project }) => {
  // Calculate completion percentage
  const totalTasks = project.totalTasks || 0
  const completedTasks = project.completedTasks || 0
  const completionPercentage = totalTasks > 0 
    ? Math.round((completedTasks / totalTasks) * 100) 
    : 0
  return (
    <Link 
      to={`/projects/${project.id}`}
      className="card card-hover border border-secondary-100 flex flex-col"
    >
      <div className="flex items-center mb-3">
        <div 
          className="w-10 h-10 rounded-lg flex items-center justify-center"
          style={{ 
            backgroundColor: project.color ? `${project.color}20` : '#e0f2fe',
            color: project.color || '#0ea5e9'
          }}
        >
          {project.icon || '📋'}
        </div>
        <div className="ml-3">
          <h3 className="font-medium text-secondary-900 truncate">{project.name}</h3>
          <p className="text-xs text-secondary-500">{project.client || 'Personal Project'}</p>
        </div>
      </div>
      <div className="mt-auto">
        <div className="flex justify-between text-xs text-secondary-500 mb-1">
          <span>Progress</span>
          <span>{completionPercentage}%</span>
        </div>
        <div className="w-full bg-secondary-100 rounded-full h-1.5">
          <div 
            className="h-1.5 rounded-full"
            style={{ 
              width: `${completionPercentage}%`,
              backgroundColor: project.color || '#0ea5e9'
            }}
          ></div>
        </div>
      </div>
      <div className="flex items-center justify-between mt-3 pt-3 border-t border-secondary-100 text-xs">
        <div className="flex items-center text-secondary-500">
          <FiClock className="mr-1" />
          <span>{project.totalHours || 0} hrs</span>
        </div>
        <div className="flex items-center text-secondary-500">
          <FiCheckCircle className="mr-1" />
          <span>{completedTasks}/{totalTasks} tasks</span>
        </div>
      </div>
    </Link>
  )
}
export default ProjectCard
</file>

<file path="frontend/src/pages/NotFound.jsx">
import { Link } from 'react-router-dom'
import { FiArrowLeft } from 'react-icons/fi'
const NotFound = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-secondary-50 to-primary-50 p-4">
      <div className="max-w-md w-full text-center">
        <h1 className="text-9xl font-bold text-primary-400">404</h1>
        <h2 className="text-2xl font-semibold text-secondary-900 mt-4">Page not found</h2>
        <p className="text-secondary-600 mt-2">
          The page you are looking for doesn't exist or has been moved.
        </p>
        <Link 
          to="/"
          className="mt-6 inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-500 rounded-lg hover:bg-primary-600"
        >
          <FiArrowLeft className="mr-2 h-4 w-4" />
          Back to Dashboard
        </Link>
      </div>
    </div>
  )
}
export default NotFound
</file>

<file path="frontend/src/pages/Reports.jsx">
import { useState } from 'react'
import { useProjects } from '../context/ProjectContext'
import { FiDownload, FiCalendar, FiPieChart, FiBarChart2, FiTrendingUp } from 'react-icons/fi'
const Reports = () => {
  const { projects, tasks, timeEntries, loading } = useProjects()
  const [reportType, setReportType] = useState('time')
  const [dateRange, setDateRange] = useState('week')
  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto"></div>
          <p className="mt-3 text-secondary-600">Loading reports data...</p>
        </div>
      </div>
    )
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-secondary-900">Reports</h1>
        <button className="btn btn-secondary flex items-center">
          <FiDownload className="mr-1.5 h-4 w-4" />
          Export
        </button>
      </div>
      {/* Report Controls */}
      <div className="card">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <label htmlFor="report-type" className="block text-sm font-medium text-secondary-700 mb-1">
              Report Type
            </label>
            <select
              id="report-type"
              value={reportType}
              onChange={(e) => setReportType(e.target.value)}
              className="input w-full"
            >
              <option value="time">Time Tracking</option>
              <option value="projects">Project Progress</option>
              <option value="tasks">Task Completion</option>
              <option value="productivity">Productivity</option>
            </select>
          </div>
          <div className="flex-1">
            <label htmlFor="date-range" className="block text-sm font-medium text-secondary-700 mb-1">
              Date Range
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiCalendar className="h-5 w-5 text-secondary-400" />
              </div>
              <select
                id="date-range"
                value={dateRange}
                onChange={(e) => setDateRange(e.target.value)}
                className="input pl-10 w-full"
              >
                <option value="today">Today</option>
                <option value="yesterday">Yesterday</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="quarter">This Quarter</option>
                <option value="year">This Year</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
          </div>
          <div className="flex-1">
            <label htmlFor="group-by" className="block text-sm font-medium text-secondary-700 mb-1">
              Group By
            </label>
            <select
              id="group-by"
              className="input w-full"
            >
              <option value="project">Project</option>
              <option value="task">Task</option>
              <option value="day">Day</option>
              <option value="week">Week</option>
              <option value="month">Month</option>
            </select>
          </div>
        </div>
      </div>
      {/* Report Visualization */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 card">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium text-secondary-900">
              {reportType === 'time' ? 'Time Tracked' : 
               reportType === 'projects' ? 'Project Progress' : 
               reportType === 'tasks' ? 'Task Completion' : 'Productivity'}
            </h2>
            <div className="flex space-x-2">
              <button className={`p-1.5 rounded-lg ${
                reportType === 'time' ? 'bg-primary-50 text-primary-600' : 'text-secondary-500 hover:bg-secondary-100'
              }`}>
                <FiBarChart2 className="h-5 w-5" />
              </button>
              <button className={`p-1.5 rounded-lg ${
                reportType === 'projects' ? 'bg-primary-50 text-primary-600' : 'text-secondary-500 hover:bg-secondary-100'
              }`}>
                <FiTrendingUp className="h-5 w-5" />
              </button>
            </div>
          </div>
          <div className="h-64 flex items-center justify-center bg-secondary-50 rounded-lg">
            {/* Chart placeholder */}
            <div className="text-center">
              <div className="w-16 h-16 mx-auto rounded-full bg-secondary-100 flex items-center justify-center text-secondary-400 mb-3">
                <FiBarChart2 className="h-8 w-8" />
              </div>
              <p className="text-secondary-600">Chart visualization will appear here</p>
              <p className="text-sm text-secondary-500 mt-1">
                {reportType === 'time' ? 'Hours tracked per project' : 
                 reportType === 'projects' ? 'Project completion over time' : 
                 reportType === 'tasks' ? 'Tasks completed vs. pending' : 'Productivity trends'}
              </p>
            </div>
          </div>
        </div>
        <div className="card">
          <h2 className="text-lg font-medium text-secondary-900 mb-4">Summary</h2>
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-medium text-secondary-700 mb-2">
                {reportType === 'time' ? 'Total Time Tracked' : 
                 reportType === 'projects' ? 'Project Status' : 
                 reportType === 'tasks' ? 'Task Status' : 'Productivity Score'}
              </h3>
              <div className="bg-secondary-50 rounded-lg p-4 text-center">
                <p className="text-3xl font-semibold text-secondary-900">
                  {reportType === 'time' ? '32h 15m' : 
                   reportType === 'projects' ? '68%' : 
                   reportType === 'tasks' ? '24/35' : '85%'}
                </p>
                <p className="text-sm text-secondary-500 mt-1">
                  {reportType === 'time' ? 'This week' : 
                   reportType === 'projects' ? 'Average completion' : 
                   reportType === 'tasks' ? 'Tasks completed' : 'Efficiency score'}
                </p>
              </div>
            </div>
            <div>
              <h3 className="text-sm font-medium text-secondary-700 mb-2">
                {reportType === 'time' ? 'Time Distribution' : 
                 reportType === 'projects' ? 'Project Distribution' : 
                 reportType === 'tasks' ? 'Task Priority' : 'Peak Hours'}
              </h3>
              <div className="space-y-2">
                <div className="flex items-center">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: '#0ea5e9' }}
                  ></div>
                  <div className="ml-2 flex-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-secondary-700">
                        {reportType === 'time' ? 'Website Redesign' : 
                         reportType === 'projects' ? 'In Progress' : 
                         reportType === 'tasks' ? 'High Priority' : 'Morning (8-12)'}
                      </span>
                      <span className="font-medium text-secondary-900">
                        {reportType === 'time' ? '12h 30m' : 
                         reportType === 'projects' ? '4' : 
                         reportType === 'tasks' ? '8' : '10h 15m'}
                      </span>
                    </div>
                    <div className="w-full bg-secondary-100 rounded-full h-1.5 mt-1">
                      <div 
                        className="h-1.5 rounded-full"
                        style={{ width: '45%', backgroundColor: '#0ea5e9' }}
                      ></div>
                    </div>
                  </div>
                </div>
                <div className="flex items-center">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: '#8b5cf6' }}
                  ></div>
                  <div className="ml-2 flex-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-secondary-700">
                        {reportType === 'time' ? 'Mobile App' : 
                         reportType === 'projects' ? 'Completed' : 
                         reportType === 'tasks' ? 'Medium Priority' : 'Afternoon (12-5)'}
                      </span>
                      <span className="font-medium text-secondary-900">
                        {reportType === 'time' ? '8h 45m' : 
                         reportType === 'projects' ? '2' : 
                         reportType === 'tasks' ? '12' : '15h 30m'}
                      </span>
                    </div>
                    <div className="w-full bg-secondary-100 rounded-full h-1.5 mt-1">
                      <div 
                        className="h-1.5 rounded-full"
                        style={{ width: '30%', backgroundColor: '#8b5cf6' }}
                      ></div>
                    </div>
                  </div>
                </div>
                <div className="flex items-center">
                  <div 
                    className="w-3 h-3 rounded-full"
                    style={{ backgroundColor: '#10b981' }}
                  ></div>
                  <div className="ml-2 flex-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-secondary-700">
                        {reportType === 'time' ? 'Marketing' : 
                         reportType === 'projects' ? 'Not Started' : 
                         reportType === 'tasks' ? 'Low Priority' : 'Evening (5-8)'}
                      </span>
                      <span className="font-medium text-secondary-900">
                        {reportType === 'time' ? '6h 15m' : 
                         reportType === 'projects' ? '1' : 
                         reportType === 'tasks' ? '15' : '6h 30m'}
                      </span>
                    </div>
                    <div className="w-full bg-secondary-100 rounded-full h-1.5 mt-1">
                      <div 
                        className="h-1.5 rounded-full"
                        style={{ width: '25%', backgroundColor: '#10b981' }}
                      ></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <h3 className="text-sm font-medium text-secondary-700 mb-2">Insights</h3>
              <div className="bg-secondary-50 rounded-lg p-3 text-sm text-secondary-700">
                <p>
                  {reportType === 'time' 
                    ? 'Most time was spent on the Website Redesign project. Tuesday was your most productive day.'
                    : reportType === 'projects'
                    ? 'You completed 2 projects this month, which is 50% more than last month.'
                    : reportType === 'tasks'
                    ? 'You completed 8 high-priority tasks this week, a 33% improvement over last week.'
                    : 'Your productivity peaks between 9-11 AM. Consider scheduling important tasks during this time.'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Detailed Data */}
      <div className="card">
        <h2 className="text-lg font-medium text-secondary-900 mb-4">Detailed Data</h2>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-secondary-200">
            <thead>
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">
                  {reportType === 'time' ? 'Project/Task' : 
                   reportType === 'projects' ? 'Project' : 
                   reportType === 'tasks' ? 'Task' : 'Date'}
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">
                  {reportType === 'time' ? 'Date' : 
                   reportType === 'projects' ? 'Status' : 
                   reportType === 'tasks' ? 'Status' : 'Hours'}
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">
                  {reportType === 'time' ? 'Duration' : 
                   reportType === 'projects' ? 'Progress' : 
                   reportType === 'tasks' ? 'Due Date' : 'Productivity'}
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-secondary-500 uppercase tracking-wider">
                  {reportType === 'time' ? 'Notes' : 
                   reportType === 'projects' ? 'Hours' : 
                   reportType === 'tasks' ? 'Priority' : 'Tasks'}
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-secondary-100">
              {[1, 2, 3, 4, 5].map((item) => (
                <tr key={item} className="hover:bg-secondary-50">
                  <td className="px-4 py-3 text-sm text-secondary-900">
                    {reportType === 'time' ? 'Website Redesign - Homepage Design' : 
                     reportType === 'projects' ? 'Website Redesign' : 
                     reportType === 'tasks' ? 'Design homepage mockup' : 'Monday, Mar 24'}
                  </td>
                  <td className="px-4 py-3 text-sm text-secondary-700">
                    {reportType === 'time' ? 'Mar 26, 2025' : 
                     reportType === 'projects' ? 'In Progress' : 
                     reportType === 'tasks' ? 'Completed' : '8h 15m'}
                  </td>
                  <td className="px-4 py-3 text-sm text-secondary-700">
                    {reportType === 'time' ? '2h 15m' : 
                     reportType === 'projects' ? '65%' : 
                     reportType === 'tasks' ? 'Mar 10, 2025' : '92%'}
                  </td>
                  <td className="px-4 py-3 text-sm text-secondary-700">
                    {reportType === 'time' ? 'Completed initial mockups' : 
                     reportType === 'projects' ? '45h' : 
                     reportType === 'tasks' ? 'High' : '12'}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
}
export default Reports
</file>

<file path="frontend/src/App.jsx">
import { Routes, Route } from 'react-router-dom'
// Layouts
import MainLayout from './components/layouts/MainLayout'
// Pages
import Dashboard from './pages/Dashboard'
import Projects from './pages/Projects'
import ProjectDetail from './pages/ProjectDetail'
import TimeTracking from './pages/TimeTracking'
import Reports from './pages/Reports'
import NotFound from './pages/NotFound'
const App = () => {
  return (
    <Routes>
      {/* Main Routes - No Authentication Required */}
      <Route path="/" element={<MainLayout />}>
        <Route index element={<Dashboard />} />
        <Route path="projects" element={<Projects />} />
        <Route path="projects/:id" element={<ProjectDetail />} />
        <Route path="time-tracking" element={<TimeTracking />} />
        <Route path="reports" element={<Reports />} />
      </Route>
      {/* 404 Route */}
      <Route path="*" element={<NotFound />} />
    </Routes>
  )
}
export default App
</file>

<file path="frontend/src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  body {
    @apply bg-gradient-to-br from-secondary-50 to-primary-50 min-h-screen font-sans text-secondary-800;
  }
}
@layer components {
  .card {
    @apply bg-white rounded-xl shadow-soft p-4 transition-all duration-300;
  }
  .card-hover {
    @apply hover:shadow-medium hover:translate-y-[-2px];
  }
  .btn {
    @apply px-4 py-2 rounded-lg transition-all duration-200 font-medium;
  }
  .btn-primary {
    @apply bg-primary-500 text-white hover:bg-primary-600;
  }
  .btn-secondary {
    @apply bg-secondary-200 text-secondary-800 hover:bg-secondary-300;
  }
  .btn-accent {
    @apply bg-accent-500 text-white hover:bg-accent-600;
  }
  .input {
    @apply px-3 py-2 border border-secondary-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-300 focus:border-transparent;
  }
}
</file>

<file path="frontend/src/main.jsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App'
import './index.css'
import { ProjectProvider } from './context/ProjectContext'
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <ProjectProvider>
        <App />
      </ProjectProvider>
    </BrowserRouter>
  </React.StrictMode>,
)
</file>

<file path="frontend/Dockerfile">
# Build stage
FROM node:18-alpine as build

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

# Build the app
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine

# Copy the build output to replace the default nginx contents
COPY --from=build /app/dist /usr/share/nginx/html

# Copy custom nginx config if needed
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
</file>

<file path="frontend/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TaskFlow | Project & Task Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="frontend/nginx.conf">
server {
    listen 80;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        root /usr/share/nginx/html;
        expires 1y;
        add_header Cache-Control "public, max-age=31536000";
    }

    # Error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
</file>

<file path="frontend/package.json">
{
  "name": "taskflow-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.16.0",
    "axios": "^1.5.0",
    "react-icons": "^4.11.0",
    "date-fns": "^2.30.0",
    "react-beautiful-dnd": "^13.1.1",
    "chart.js": "^4.4.0",
    "react-chartjs-2": "^5.2.0"
  },
  "devDependencies": {
    "vite": "^4.4.9",
    "@vitejs/plugin-react": "^4.0.4",
    "tailwindcss": "^3.3.3",
    "postcss": "^8.4.29",
    "autoprefixer": "^10.4.15"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  }
}
</file>

<file path="frontend/postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="frontend/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        secondary: {
          50: '#f8fafc',
          100: '#f1f5f9',
          200: '#e2e8f0',
          300: '#cbd5e1',
          400: '#94a3b8',
          500: '#64748b',
          600: '#475569',
          700: '#334155',
          800: '#1e293b',
          900: '#0f172a',
        },
        accent: {
          50: '#f5f3ff',
          100: '#ede9fe',
          200: '#ddd6fe',
          300: '#c4b5fd',
          400: '#a78bfa',
          500: '#8b5cf6',
          600: '#7c3aed',
          700: '#6d28d9',
          800: '#5b21b6',
          900: '#4c1d95',
        }
      },
      borderRadius: {
        'xl': '1rem',
        '2xl': '1.5rem',
      },
      boxShadow: {
        'soft': '0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03)',
        'medium': '0 10px 15px -3px rgba(0, 0, 0, 0.05), 0 4px 6px -2px rgba(0, 0, 0, 0.03)',
      }
    },
  },
  plugins: [],
}
</file>

<file path="frontend/vite.config.js">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    host: '0.0.0.0',
  }
})
</file>

<file path=".clinerules">
## Role
You are a **senior front-end developer**.

## Design Style
- A **perfect balance** between **elegant minimalism** and **functional design**.
- **Soft, refreshing gradient colors** that seamlessly integrate with the brand palette.
- **Well-proportioned white space** for a clean layout.
- **Light and immersive** user experience.
- **Clear information hierarchy** using **subtle shadows and modular card layouts**.
- **Natural focus** on core functionalities.
- **Refined rounded corners**.
- **Delicate micro-interactions**.
- **Comfortable visual proportions**.
- **Accent Colors** chosen based on the app type

## Technical Specifications
1. **Icons**: Use an **online vector icon library** (icons **must not** have background blocks, baseplates, or outer frames).
2. **Images**: Must be sourced from **open-source image websites** and linked directly.
3. **Styles**: Use **Tailwind CSS** via **CDN** for styling.
4. **Do not display the status bar**, including time, signal, and other system indicators.
5. **All text should be only black or white**.

## Task
This is an **web application that allows users to manage their projects and tasks nested in projects, timetrack time spent. In a clean effective, enticing and creative way**.
- Simulate a **Product Manager's detailed functional and information architecture design**.
- Follow the **design style** and **technical specifications** to generate a complete **UI design plan**.
- Create a **UI.html** file that contains all pages displayed in a **horizontal layout**.
- Generate the **first two pages** now
</file>

<file path="project.spec">
This project is a **web application that allows users to manage their projects and tasks nested in projects, timetrack time spent. In a clean effective, enticing and creative way**.


Tech stack:
- React.js
- Local Database: SQLite
- Docker-compose
- Node.js
- Tailwind CSS
</file>

<file path="repomix.config.json">
{
  "output": {
    "filePath": "repomix-output.xml",
    "style": "xml",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": true,
    "compress": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": ["**.xml", "**.db", "docs/**", "frontend/node_modules/**", "backend/node_modules/**"]
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}
</file>

<file path="backend/routes/projects.js">
const express = require('express');
const router = express.Router();
const pool = require('../database.js'); // Use the exported pool
const crypto = require('crypto'); // For generating unique IDs
// Helper function for consistent error handling
const handleDatabaseError = (err, res, next) => {
  console.error('Database Error:', err.stack);
  // Avoid sending detailed DB errors to client in production
  if (process.env.NODE_ENV === 'production') {
    return res.status(500).json({ message: 'Internal Server Error' });
  }
  return next(err);
};
// GET /api/projects - Get all projects
router.get('/', async (req, res, next) => {
  const sql = 'SELECT * FROM projects ORDER BY "createdAt" DESC'; // Use quotes for camelCase
  try {
    const result = await pool.query(sql);
    res.json(result.rows);
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// GET /api/projects/:id - Get a single project by ID
router.get('/:id', async (req, res, next) => {
  const sql = 'SELECT * FROM projects WHERE id = $1'; // Use $1 placeholder
  const params = [req.params.id];
  try {
    const result = await pool.query(sql, params);
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Project not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// POST /api/projects - Create a new project
router.post('/', async (req, res, next) => {
  const { name, description, client, color, startDate, dueDate } = req.body;
  const errors = [];
  if (!name) {
    errors.push("Project name is required");
  }
  if (errors.length) {
    return res.status(400).json({ errors });
  }
  const id = crypto.randomUUID();
  // Use quotes for camelCase column names
  const sql = `INSERT INTO projects (id, name, description, client, color, "startDate", "dueDate") 
               VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`; // Use RETURNING * to get the inserted row
  // Ensure dates are null or valid ISO strings for TIMESTAMPTZ
  const params = [
    id,
    name,
    description || null,
    client || null,
    color || '#0ea5e9',
    startDate || null, 
    dueDate || null
  ];
  try {
    const result = await pool.query(sql, params);
    res.status(201).json(result.rows[0]); // Return the created project from RETURNING
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// PUT /api/projects/:id - Update an existing project
router.put('/:id', async (req, res, next) => {
  const { name, description, client, color, startDate, dueDate, status } = req.body;
  const id = req.params.id;
  if (req.body.hasOwnProperty('name') && !name) {
      return res.status(400).json({ message: "Project name cannot be empty" });
  }
  // Construct the update query dynamically
  const fields = [];
  const params = [];
  let paramIndex = 1;
  // Use quotes for camelCase column names
  if (req.body.hasOwnProperty('name')) { fields.push(`name = $${paramIndex++}`); params.push(name); }
  if (req.body.hasOwnProperty('description')) { fields.push(`description = $${paramIndex++}`); params.push(description); }
  if (req.body.hasOwnProperty('client')) { fields.push(`client = $${paramIndex++}`); params.push(client); }
  if (req.body.hasOwnProperty('color')) { fields.push(`color = $${paramIndex++}`); params.push(color); }
  if (req.body.hasOwnProperty('startDate')) { fields.push(`"startDate" = $${paramIndex++}`); params.push(startDate || null); }
  if (req.body.hasOwnProperty('dueDate')) { fields.push(`"dueDate" = $${paramIndex++}`); params.push(dueDate || null); }
  if (req.body.hasOwnProperty('status')) { fields.push(`status = $${paramIndex++}`); params.push(status); }
  if (fields.length === 0) {
      return res.status(400).json({ message: "No fields provided for update" });
  }
  params.push(id); // Add id for the WHERE clause
  const sql = `UPDATE projects SET ${fields.join(', ')} WHERE id = $${paramIndex} RETURNING *`;
  try {
    const result = await pool.query(sql, params);
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Project not found or no changes made' });
    }
    res.json(result.rows[0]); // Return the updated project
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// DELETE /api/projects/:id - Delete a project
router.delete('/:id', async (req, res, next) => {
  const sql = 'DELETE FROM projects WHERE id = $1';
  const params = [req.params.id];
  try {
    const result = await pool.query(sql, params);
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Project not found' });
    }
    res.status(200).json({ message: 'Project deleted successfully' });
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
module.exports = router;
</file>

<file path="backend/routes/tasks.js">
const express = require('express');
const router = express.Router();
const pool = require('../database.js'); // Use the exported pool
const crypto = require('crypto');
// Re-use the helper function for consistent error handling
const handleDatabaseError = (err, res, next) => {
  console.error('Database Error:', err.stack);
  if (process.env.NODE_ENV === 'production') {
    return res.status(500).json({ message: 'Internal Server Error' });
  }
  return next(err);
};
// GET /api/tasks - Get all tasks (optionally filter by projectId)
router.get('/', async (req, res, next) => {
  const projectId = req.query.projectId;
  let sql = 'SELECT * FROM tasks';
  const params = [];
  let paramIndex = 1;
  // Use quotes for camelCase column names
  if (projectId) {
    sql += ` WHERE "projectId" = $${paramIndex++}`;
    params.push(projectId);
  }
  sql += ' ORDER BY "createdAt" DESC';
  try {
    const result = await pool.query(sql, params);
    res.json(result.rows);
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// GET /api/tasks/:id - Get a single task by ID
router.get('/:id', async (req, res, next) => {
  const sql = 'SELECT * FROM tasks WHERE id = $1';
  const params = [req.params.id];
  try {
    const result = await pool.query(sql, params);
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Task not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// POST /api/tasks - Create a new task
router.post('/', async (req, res, next) => {
  const { projectId, title, description, status, priority, dueDate, estimatedHours } = req.body;
  const errors = [];
  if (!projectId) {
    errors.push("Project ID is required");
  }
  if (!title) {
    errors.push("Task title is required");
  }
  // TODO: Validate if projectId exists in the projects table before insertion
  if (errors.length) {
    return res.status(400).json({ errors });
  }
  const id = crypto.randomUUID();
  // Use quotes for camelCase column names
  const sql = `INSERT INTO tasks (id, "projectId", title, description, status, priority, "dueDate", "estimatedHours") 
               VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *`;
  const params = [
    id,
    projectId,
    title,
    description || null,
    status || 'not-started',
    priority || 'medium',
    dueDate || null,
    estimatedHours || null
  ];
  try {
    const result = await pool.query(sql, params);
    res.status(201).json(result.rows[0]);
  } catch (err) {
    // Handle potential foreign key violation if projectId doesn't exist
    if (err.code === '23503') { // Foreign key violation error code in PostgreSQL
        return res.status(400).json({ message: `Project with ID ${projectId} does not exist.` });
    }
    handleDatabaseError(err, res, next);
  }
});
// PUT /api/tasks/:id - Update an existing task
router.put('/:id', async (req, res, next) => {
  const { projectId, title, description, status, priority, dueDate, estimatedHours } = req.body;
  const id = req.params.id;
  // Basic validation
  if (req.body.hasOwnProperty('title') && !title) {
      return res.status(400).json({ message: "Task title cannot be empty" });
  }
  if (req.body.hasOwnProperty('projectId') && !projectId) {
      return res.status(400).json({ message: "Project ID cannot be empty" });
  }
  // TODO: Add validation: check if projectId exists if provided and changed
  // Construct the update query dynamically
  const fields = [];
  const params = [];
  let paramIndex = 1;
  // Use quotes for camelCase column names
  if (req.body.hasOwnProperty('projectId')) { fields.push(`"projectId" = $${paramIndex++}`); params.push(projectId); }
  if (req.body.hasOwnProperty('title')) { fields.push(`title = $${paramIndex++}`); params.push(title); }
  if (req.body.hasOwnProperty('description')) { fields.push(`description = $${paramIndex++}`); params.push(description === undefined ? null : description); }
  if (req.body.hasOwnProperty('status')) { fields.push(`status = $${paramIndex++}`); params.push(status); }
  if (req.body.hasOwnProperty('priority')) { fields.push(`priority = $${paramIndex++}`); params.push(priority); }
  if (req.body.hasOwnProperty('dueDate')) { fields.push(`"dueDate" = $${paramIndex++}`); params.push(dueDate || null); }
  if (req.body.hasOwnProperty('estimatedHours')) { fields.push(`"estimatedHours" = $${paramIndex++}`); params.push(estimatedHours || null); }
  if (fields.length === 0) {
      return res.status(400).json({ message: "No fields provided for update" });
  }
  params.push(id); // Add id for the WHERE clause
  const sql = `UPDATE tasks SET ${fields.join(', ')} WHERE id = $${paramIndex} RETURNING *`;
  try {
    const result = await pool.query(sql, params);
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Task not found or no changes made' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    // Handle potential foreign key violation if projectId is updated to a non-existent one
    if (err.code === '23503') {
        return res.status(400).json({ message: `Project with ID ${projectId} does not exist.` });
    }
    handleDatabaseError(err, res, next);
  }
});
// DELETE /api/tasks/:id - Delete a task
router.delete('/:id', async (req, res, next) => {
  const sql = 'DELETE FROM tasks WHERE id = $1';
  const params = [req.params.id];
  try {
    const result = await pool.query(sql, params);
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Task not found' });
    }
    res.status(200).json({ message: 'Task deleted successfully' });
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
module.exports = router;
</file>

<file path="backend/Dockerfile">
FROM node:18-alpine

WORKDIR /app

# Copy package.json and package-lock.json first for cache optimization
COPY package*.json ./

# Install production dependencies inside the container
# Use npm ci for faster, more reliable builds based on package-lock.json
RUN npm ci --omit=dev

# Copy the rest of the application code
COPY . .

# Expose the correct port
EXPOSE 5001

# The command will be specified in docker-compose.yml, so CMD is optional
# If included, it should match the production start command
# CMD [ "npm", "start" ]
</file>

<file path="frontend/src/components/tasks/TaskItem.jsx">
import { useState } from 'react'
import { format, isPast, isToday } from 'date-fns'
import { useProjects } from '../../context/ProjectContext'
import { FiClock, FiPlay, FiSquare, FiCheck, FiEdit2, FiTrash2, FiX } from 'react-icons/fi'
const TaskItem = ({ task }) => {
  const { projects, updateTask, deleteTask, startTimeTracking, stopTimeTracking, timeEntries } = useProjects()
  const [isTracking, setIsTracking] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)
  const [editableTask, setEditableTask] = useState(null)
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  // Find project this task belongs to
  const project = projects.find(p => p.id === task.projectId) || {}
  // Check if task has an active time entry
  const activeTimeEntry = timeEntries.find(entry => entry.taskId === task.id && entry.endTime === null)
  // Format due date with visual indication if it's overdue or due today
  const formatDueDate = () => {
    if (!task.dueDate) return null
    const dueDate = new Date(task.dueDate)
    const isOverdue = isPast(dueDate) && !isToday(dueDate)
    const isDueToday = isToday(dueDate)
    return (
      <span className={`text-xs ${isOverdue ? 'text-red-600' : isDueToday ? 'text-amber-600' : 'text-secondary-500'}`}>
        {isOverdue ? 'Overdue: ' : isDueToday ? 'Today: ' : ''}
        {format(dueDate, 'MMM d')}
      </span>
    )
  }
  // Handle task status toggle
  const toggleTaskStatus = async () => {
    const newStatus = task.status === 'completed' ? 'in-progress' : 'completed'
    await updateTask(task.id, { status: newStatus })
  }
  // Handle time tracking
  const toggleTimeTracking = async () => {
    if (activeTimeEntry) {
      await stopTimeTracking(activeTimeEntry.id)
      setIsTracking(false)
    } else {
      await startTimeTracking(task.id)
      setIsTracking(true)
    }
  }
  // Handle opening the edit modal
  const handleOpenEditModal = () => {
    setEditableTask(task)
    setShowEditModal(true)
  }
  // Handle updating the task
  const handleUpdateTask = async (e) => {
    e.preventDefault()
    if (!editableTask) return
    const result = await updateTask(task.id, editableTask)
    if (result.success) {
      setShowEditModal(false)
    } else {
      console.error('Failed to update task:', result.message)
    }
  }
  // Handle deleting the task
  const handleDeleteTask = async () => {
    const result = await deleteTask(task.id)
    if (result.success) {
      setShowDeleteConfirm(false)
    } else {
      console.error('Failed to delete task:', result.message)
    }
  }
  return (
    <>
      <div className="py-3 flex items-center justify-between group">
        <div className="flex items-center">
          <button
            onClick={toggleTaskStatus}
            className={`flex-shrink-0 h-5 w-5 rounded-full border ${
              task.status === 'completed'
                ? 'bg-primary-500 border-primary-500 flex items-center justify-center'
                : 'border-secondary-300'
            }`}
          >
            {task.status === 'completed' && <FiCheck className="h-3 w-3 text-white" />}
          </button>
          <div className="ml-3">
            <div className="flex items-center">
              <p className={`text-sm font-medium ${
                task.status === 'completed' ? 'text-secondary-500 line-through' : 'text-secondary-900'
              }`}>
                {task.title}
              </p>
              {task.priority === 'high' && (
                <span className="ml-2 px-1.5 py-0.5 text-xs rounded bg-red-100 text-red-800">
                  High
                </span>
              )}
            </div>
            <div className="flex items-center mt-1 space-x-2">
              <span className="text-xs text-secondary-500">
                {project.name || 'Unknown Project'}
              </span>
              {formatDueDate()}
              {task.estimatedHours && (
                <span className="text-xs text-secondary-500 flex items-center">
                  <FiClock className="mr-1 h-3 w-3" />
                  {task.estimatedHours}h
                </span>
              )}
            </div>
          </div>
        </div>
        <div className="flex items-center space-x-1">
          <button
            onClick={handleOpenEditModal}
            className="p-2 rounded-lg text-secondary-500 hover:bg-secondary-100 hover:text-secondary-700 opacity-0 group-hover:opacity-100 transition-opacity"
            title="Edit task"
          >
            <FiEdit2 className="h-4 w-4" />
          </button>
          <button
            onClick={() => setShowDeleteConfirm(true)}
            className="p-2 rounded-lg text-secondary-500 hover:bg-red-50 hover:text-red-600 opacity-0 group-hover:opacity-100 transition-opacity"
            title="Delete task"
          >
            <FiTrash2 className="h-4 w-4" />
          </button>
          <button
            onClick={toggleTimeTracking}
            className={`p-2 rounded-lg ${
              activeTimeEntry
                ? 'text-red-600 hover:bg-red-50'
                : 'text-primary-600 hover:bg-primary-50'
            }`}
            title={activeTimeEntry ? 'Stop tracking' : 'Start tracking'}
          >
            {activeTimeEntry ? <FiSquare className="h-5 w-5" /> : <FiPlay className="h-5 w-5" />}
          </button>
        </div>
      </div>
      {/* Edit Task Modal */}
      {showEditModal && editableTask && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div className="flex justify-between items-center p-4 border-b border-secondary-100">
              <h3 className="text-lg font-medium text-secondary-900">Edit Task</h3>
              <button
                onClick={() => setShowEditModal(false)}
                className="text-secondary-500 hover:text-secondary-700"
              >
                <FiX className="h-5 w-5" />
              </button>
            </div>
            <div className="p-4 max-h-[80vh] overflow-y-auto">
              <form onSubmit={handleUpdateTask}>
                <div className="space-y-4">
                  <div>
                    <label htmlFor="edit-task-title" className="block text-sm font-medium text-secondary-700 mb-1">
                      Task Title *
                    </label>
                    <input
                      type="text"
                      id="edit-task-title"
                      value={editableTask.title}
                      onChange={(e) => setEditableTask({ ...editableTask, title: e.target.value })}
                      className="input w-full"
                      required
                    />
                  </div>
                  <div>
                    <label htmlFor="edit-task-description" className="block text-sm font-medium text-secondary-700 mb-1">
                      Description
                    </label>
                    <textarea
                      id="edit-task-description"
                      value={editableTask.description}
                      onChange={(e) => setEditableTask({ ...editableTask, description: e.target.value })}
                      className="input w-full h-24"
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="edit-task-status" className="block text-sm font-medium text-secondary-700 mb-1">
                        Status
                      </label>
                      <select
                        id="edit-task-status"
                        value={editableTask.status}
                        onChange={(e) => setEditableTask({ ...editableTask, status: e.target.value })}
                        className="input w-full"
                      >
                        <option value="not-started">Not Started</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                      </select>
                    </div>
                    <div>
                      <label htmlFor="edit-task-priority" className="block text-sm font-medium text-secondary-700 mb-1">
                        Priority
                      </label>
                      <select
                        id="edit-task-priority"
                        value={editableTask.priority}
                        onChange={(e) => setEditableTask({ ...editableTask, priority: e.target.value })}
                        className="input w-full"
                      >
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                      </select>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="edit-task-dueDate" className="block text-sm font-medium text-secondary-700 mb-1">
                        Due Date
                      </label>
                      <input
                        type="date"
                        id="edit-task-dueDate"
                        value={editableTask.dueDate}
                        onChange={(e) => setEditableTask({ ...editableTask, dueDate: e.target.value })}
                        className="input w-full"
                      />
                    </div>
                    <div>
                      <label htmlFor="edit-task-estimatedHours" className="block text-sm font-medium text-secondary-700 mb-1">
                        Estimated Hours
                      </label>
                      <input
                        type="number"
                        id="edit-task-estimatedHours"
                        min="0"
                        step="0.5"
                        value={editableTask.estimatedHours}
                        onChange={(e) => setEditableTask({ ...editableTask, estimatedHours: parseFloat(e.target.value) || 0 })}
                        className="input w-full"
                      />
                    </div>
                  </div>
                </div>
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowEditModal(false)}
                    className="btn btn-secondary"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                  >
                    Save Changes
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-secondary-900 mb-2">Delete Task</h3>
            <p className="text-secondary-600 mb-4">
              Are you sure you want to delete this task? This action cannot be undone.
            </p>
            <div className="flex space-x-3 justify-end">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="btn btn-secondary"
              >
                Cancel
              </button>
              <button
                onClick={handleDeleteTask}
                className="btn bg-red-500 text-white hover:bg-red-600"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  )
}
export default TaskItem
</file>

<file path="frontend/src/components/timeTracking/TimeTrackingWidget.jsx">
import { useState, useEffect } from 'react'
import { useProjects } from '../../context/ProjectContext'
import { FiPlay, FiPause, FiClock, FiStopCircle } from 'react-icons/fi'
const TimeTrackingWidget = () => {
  const {
    projects,
    tasks,
    timeEntries,
    stopTimeTracking,
    startTimeTracking,
    pauseTimeTracking,
    resumeTimeTracking,
    loading
  } = useProjects()
  // Find the active entry from the context state
  const activeTimeEntry = timeEntries.find(entry => entry.endTime === null)
  const [elapsedTime, setElapsedTime] = useState(0)
  // Find task and project if there's an active time entry
  const task = activeTimeEntry ? tasks.find(t => t.id === activeTimeEntry.taskId) : null
  const project = task ? projects.find(p => p.id === task.projectId) : null
  // Timer effect - Calculate elapsed time based on context data
  useEffect(() => {
    let interval = null
    if (activeTimeEntry) {
      const calculateElapsed = () => {
        let currentElapsedTime = parseFloat(activeTimeEntry.totalPausedDuration) || 0;
        if (!activeTimeEntry.isPaused && activeTimeEntry.lastResumedAt) {
          const now = new Date().getTime();
          const lastResume = new Date(activeTimeEntry.lastResumedAt).getTime();
          currentElapsedTime += (now - lastResume) / 1000;
        }
        setElapsedTime(Math.floor(currentElapsedTime));
      };
      calculateElapsed(); // Calculate once immediately
      // If it's running, update every second
      if (!activeTimeEntry.isPaused) {
        interval = setInterval(calculateElapsed, 1000);
      }
    } else {
      setElapsedTime(0); // Reset if no active timer
    }
    return () => {
      if (interval) clearInterval(interval)
    }
    // Depend on activeTimeEntry properties that change timer status
  }, [activeTimeEntry?.id, activeTimeEntry?.isPaused, activeTimeEntry?.lastResumedAt, activeTimeEntry?.totalPausedDuration])
  // Format time as HH:MM:SS
  const formatTime = (seconds) => {
    const h = Math.floor(seconds / 3600)
    const m = Math.floor((seconds % 3600) / 60)
    const s = seconds % 60
    return [
      h.toString().padStart(2, '0'),
      m.toString().padStart(2, '0'),
      s.toString().padStart(2, '0')
    ].join(':')
  }
  // Handle stop tracking
  const handleStopTracking = async () => {
    if (activeTimeEntry) {
      // No need for local state change, context update will trigger re-render
      await stopTimeTracking(activeTimeEntry.id)
    }
  }
  // Handle pause/resume using context functions
  const handlePauseResume = async () => {
    if (!activeTimeEntry) return;
    if (activeTimeEntry.isPaused) {
      await resumeTimeTracking(activeTimeEntry.id);
    } else {
      await pauseTimeTracking(activeTimeEntry.id);
    }
    // No need to call setIsPaused, context update handles it
  }
  return (
    <div className="card h-full flex flex-col">
      <h2 className="text-lg font-medium text-secondary-900 mb-4">Time Tracking</h2>
      {activeTimeEntry ? (
        <div className="flex-1 flex flex-col">
          <div className="p-4 rounded-xl bg-gradient-to-br from-primary-50 to-primary-100 border border-primary-200">
            <div className="flex items-center mb-3">
              <div className="w-10 h-10 rounded-lg bg-primary-500/10 flex items-center justify-center text-primary-600">
                <FiClock className="h-5 w-5" />
              </div>
              <div className="ml-3">
                <h3 className="font-medium text-secondary-900 truncate">{task?.title || 'Unknown Task'}</h3>
                <p className="text-xs text-secondary-500">{project?.name || 'Unknown Project'}</p>
              </div>
            </div>
            <div className="text-center py-3">
              <div className="text-3xl font-semibold text-secondary-900 font-mono">
                {formatTime(elapsedTime)}
              </div>
              <p className="text-xs text-secondary-500 mt-1">
                Started at {new Date(activeTimeEntry.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </p>
            </div>
            <div className="flex space-x-2 mt-2">
              <button
                onClick={handlePauseResume}
                className="flex-1 btn bg-white text-secondary-800 border border-secondary-200 hover:bg-secondary-50 flex items-center justify-center"
                disabled={loading || !activeTimeEntry} // Disable if loading or no active entry
              >
                {activeTimeEntry?.isPaused ? (
                  <>
                    <FiPlay className="mr-1.5 h-4 w-4" />
                    Resume
                  </>
                ) : (
                  <>
                    <FiPause className="mr-1.5 h-4 w-4" />
                    Pause
                  </>
                )}
              </button>
              <button
                onClick={handleStopTracking}
                className="flex-1 btn bg-red-50 text-red-600 border border-red-200 hover:bg-red-100 flex items-center justify-center"
                disabled={loading || !activeTimeEntry} // Disable if loading or no active entry
              >
                <FiStopCircle className="mr-1.5 h-4 w-4" />
                Stop
              </button>
            </div>
          </div>
          <div className="mt-4 flex-1">
            <h3 className="text-sm font-medium text-secondary-900 mb-2">Recent Time Entries</h3>
            <div className="text-center py-8 bg-secondary-50 rounded-lg">
              <p className="text-secondary-600 text-sm">Time entries will appear here</p>
            </div>
          </div>
        </div>
      ) : (
        <div className="flex-1 flex flex-col items-center justify-center text-center p-6 bg-secondary-50 rounded-xl">
          <div className="w-16 h-16 rounded-full bg-secondary-100 flex items-center justify-center text-secondary-400 mb-3">
            <FiClock className="h-8 w-8" />
          </div>
          <h3 className="text-secondary-900 font-medium mb-1">No active tracking</h3>
          <p className="text-secondary-600 text-sm mb-4">
            Start tracking time on any task to see it here
          </p>
          <button 
            onClick={() => startTimeTracking('task5')} 
            className="btn btn-primary flex items-center"
          >
            <FiPlay className="mr-1.5 h-4 w-4" />
            Start Tracking
          </button>
        </div>
      )}
    </div>
  )
}
export default TimeTrackingWidget
</file>

<file path="frontend/src/pages/Dashboard.jsx">
import { useState, useEffect } from 'react'
import { Link } from 'react-router-dom'
import { useProjects } from '../context/ProjectContext'
import { FiClock, FiCheckCircle, FiAlertCircle, FiActivity, FiPlus } from 'react-icons/fi'
import { format } from 'date-fns'
// Components
import ProjectCard from '../components/projects/ProjectCard'
import TaskItem from '../components/tasks/TaskItem'
import TimeTrackingWidget from '../components/timeTracking/TimeTrackingWidget'
const Dashboard = () => {
  const { projects, tasks, timeEntries, loading } = useProjects()
  const [recentProjects, setRecentProjects] = useState([])
  const [upcomingTasks, setUpcomingTasks] = useState([])
  const [activeTimeEntry, setActiveTimeEntry] = useState(null)
  const [stats, setStats] = useState({
    totalProjects: 0,
    completedTasks: 0,
    pendingTasks: 0,
    trackedHoursToday: 0
  })
  useEffect(() => {
    if (!loading) {
      // Get recent projects (last 4)
      const sortedProjects = [...projects].sort((a, b) => 
        new Date(b.updatedAt) - new Date(a.updatedAt)
      ).slice(0, 4)
      setRecentProjects(sortedProjects)
      // Get upcoming tasks (due soon, not completed)
      const now = new Date()
      const upcoming = tasks
        .filter(task => task.status !== 'completed' && task.dueDate && new Date(task.dueDate) >= now)
        .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))
        .slice(0, 5)
      setUpcomingTasks(upcoming)
      // Find active time entry if any
      const active = timeEntries.find(entry => entry.endTime === null)
      setActiveTimeEntry(active)
      // Calculate stats
      const completed = tasks.filter(task => task.status === 'completed').length
      const pending = tasks.filter(task => task.status !== 'completed').length
      // Calculate hours tracked today
      const today = new Date().setHours(0, 0, 0, 0)
      const todayEntries = timeEntries.filter(entry => {
        const entryDate = new Date(entry.startTime).setHours(0, 0, 0, 0)
        return entryDate === today
      })
      const trackedMinutes = todayEntries.reduce((total, entry) => {
        const start = new Date(entry.startTime)
        const end = entry.endTime ? new Date(entry.endTime) : new Date()
        return total + (end - start) / 60000 // convert ms to minutes
      }, 0)
      setStats({
        totalProjects: projects.length,
        completedTasks: completed,
        pendingTasks: pending,
        trackedHoursToday: Math.round(trackedMinutes / 6) / 10 // round to 1 decimal
      })
    }
  }, [projects, tasks, timeEntries, loading])
  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto"></div>
          <p className="mt-3 text-secondary-600">Loading your dashboard...</p>
        </div>
      </div>
    )
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-secondary-900">Dashboard</h1>
        <div className="text-sm text-secondary-500">
          {format(new Date(), 'EEEE, MMMM d, yyyy')}
        </div>
      </div>
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <div className="card bg-gradient-to-br from-primary-50 to-primary-100 border border-primary-200">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-primary-500/10">
              <FiActivity className="h-6 w-6 text-primary-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-sm font-medium text-secondary-500">Active Projects</h3>
              <p className="text-2xl font-semibold text-secondary-900">{stats.totalProjects}</p>
            </div>
          </div>
        </div>
        <div className="card bg-gradient-to-br from-green-50 to-green-100 border border-green-200">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-green-500/10">
              <FiCheckCircle className="h-6 w-6 text-green-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-sm font-medium text-secondary-500">Completed Tasks</h3>
              <p className="text-2xl font-semibold text-secondary-900">{stats.completedTasks}</p>
            </div>
          </div>
        </div>
        <div className="card bg-gradient-to-br from-amber-50 to-amber-100 border border-amber-200">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-amber-500/10">
              <FiAlertCircle className="h-6 w-6 text-amber-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-sm font-medium text-secondary-500">Pending Tasks</h3>
              <p className="text-2xl font-semibold text-secondary-900">{stats.pendingTasks}</p>
            </div>
          </div>
        </div>
        <div className="card bg-gradient-to-br from-accent-50 to-accent-100 border border-accent-200">
          <div className="flex items-center">
            <div className="p-3 rounded-lg bg-accent-500/10">
              <FiClock className="h-6 w-6 text-accent-600" />
            </div>
            <div className="ml-4">
              <h3 className="text-sm font-medium text-secondary-500">Hours Today</h3>
              <p className="text-2xl font-semibold text-secondary-900">{stats.trackedHoursToday}</p>
            </div>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Recent Projects */}
        <div className="lg:col-span-2">
          <div className="card">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-medium text-secondary-900">Recent Projects</h2>
              <Link to="/projects" className="text-sm font-medium text-primary-600 hover:text-primary-700">
                View All
              </Link>
            </div>
            {recentProjects.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {recentProjects.map(project => (
                  <ProjectCard key={project.id} project={project} />
                ))}
              </div>
            ) : (
              <div className="text-center py-8 bg-secondary-50 rounded-lg">
                <p className="text-secondary-600 mb-3">No projects yet</p>
                <Link 
                  to="/projects" 
                  className="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-primary-500 rounded-lg hover:bg-primary-600"
                >
                  <FiPlus className="mr-2 h-4 w-4" />
                  Create Project
                </Link>
              </div>
            )}
          </div>
        </div>
        {/* Time Tracking Widget */}
        <div className="lg:col-span-1">
          <TimeTrackingWidget />
        </div>
      </div>
      {/* Upcoming Tasks */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-secondary-900">Upcoming Tasks</h2>
          <Link to="/projects" className="text-sm font-medium text-primary-600 hover:text-primary-700">
            View All Tasks
          </Link>
        </div>
        {upcomingTasks.length > 0 ? (
          <div className="divide-y divide-secondary-100">
            {upcomingTasks.map(task => (
              <TaskItem key={task.id} task={task} />
            ))}
          </div>
        ) : (
          <div className="text-center py-8 bg-secondary-50 rounded-lg">
            <p className="text-secondary-600">No upcoming tasks</p>
          </div>
        )}
      </div>
    </div>
  )
}
export default Dashboard
</file>

<file path="frontend/src/pages/TimeTracking.jsx">
import { useState, useEffect, useMemo } from 'react'
import { useProjects } from '../context/ProjectContext'
import { FiPlay, FiPause, FiClock, FiCalendar, FiFilter, FiSearch, FiChevronDown, FiTrash2 } from 'react-icons/fi'
import { format, startOfWeek, endOfWeek, eachDayOfInterval, isToday, isSameDay, parseISO, startOfMonth, endOfMonth } from 'date-fns'
import TimeTrackingWidget from '../components/timeTracking/TimeTrackingWidget'
const TimeTracking = () => {
  const { projects, tasks, timeEntries, loading, startTimeTracking, deleteTimeEntry } = useProjects()
  const [weekDays, setWeekDays] = useState([])
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedProjectId, setSelectedProjectId] = useState('')
  const [selectedTaskToStart, setSelectedTaskToStart] = useState('')
  useEffect(() => {
    const now = new Date()
    const start = startOfWeek(now, { weekStartsOn: 1 })
    const end = endOfWeek(now, { weekStartsOn: 1 })
    const days = eachDayOfInterval({ start, end })
    setWeekDays(days)
  }, [])
  const formatDuration = (totalSeconds) => {
    if (totalSeconds == null || totalSeconds < 0) return '0h 0m';
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    return `${hours}h ${minutes}m`;
  };
  const getEntryInfo = (entry) => {
    const task = tasks.find(t => t.id === entry.taskId)
    const project = task ? projects.find(p => p.id === task.projectId) : null
    return { task, project }
  }
  const timeStats = useMemo(() => {
    const now = new Date();
    const weekStart = startOfWeek(now, { weekStartsOn: 1 });
    const weekEnd = endOfWeek(now, { weekStartsOn: 1 });
    const monthStart = startOfMonth(now);
    const monthEnd = endOfMonth(now);
    let todaySeconds = 0;
    let weekSeconds = 0;
    let monthSeconds = 0;
    const dailySeconds = {};
    weekDays.forEach(day => {
      dailySeconds[format(day, 'yyyy-MM-dd')] = 0;
    });
    timeEntries.forEach(entry => {
      const entryDate = parseISO(entry.startTime);
      const duration = entry.duration ? parseFloat(entry.duration) : 0;
      if (duration > 0) {
        const dayKey = format(entryDate, 'yyyy-MM-dd');
        if (dayKey in dailySeconds) {
          dailySeconds[dayKey] += duration;
        }
        if (isToday(entryDate)) {
          todaySeconds += duration;
        }
        if (entryDate >= weekStart && entryDate <= weekEnd) {
          weekSeconds += duration;
        }
        if (entryDate >= monthStart && entryDate <= monthEnd) {
          monthSeconds += duration;
        }
      }
    });
    return {
      today: formatDuration(todaySeconds),
      week: formatDuration(weekSeconds),
      month: formatDuration(monthSeconds),
      daily: weekDays.map(day => formatDuration(dailySeconds[format(day, 'yyyy-MM-dd')] || 0))
    };
  }, [timeEntries, weekDays]);
  const filteredTimeEntries = useMemo(() => {
    return timeEntries
      .filter(entry => {
        const { task, project } = getEntryInfo(entry);
        const searchTermLower = searchTerm.toLowerCase();
        const matchesSearch = (
          task?.title.toLowerCase().includes(searchTermLower) ||
          project?.name.toLowerCase().includes(searchTermLower) ||
          entry.notes?.toLowerCase().includes(searchTermLower)
        );
        const matchesProject = !selectedProjectId || project?.id === selectedProjectId;
        return matchesSearch && matchesProject;
      })
      .sort((a, b) => parseISO(b.startTime) - parseISO(a.startTime));
  }, [timeEntries, tasks, projects, searchTerm, selectedProjectId]);
  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto"></div>
          <p className="mt-3 text-secondary-600">Loading time tracking data...</p>
        </div>
      </div>
    )
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-secondary-900">Time Tracking</h1>
        <button 
          onClick={() => selectedTaskToStart && startTimeTracking(selectedTaskToStart)}
          className="btn btn-primary flex items-center"
          disabled={!selectedTaskToStart || !!timeEntries.find(te => !te.endTime)}
        >
          <FiPlay className="mr-1.5 h-4 w-4" />
          Start Timer
        </button>
      </div>
      <div className="card">
        <h2 className="text-lg font-medium text-secondary-900 mb-4">Weekly Overview</h2>
        <div className="grid grid-cols-7 gap-2">
          {weekDays.map((day, index) => {
            const isCurrentDay = isToday(day)
            return (
              <div 
                key={index}
                className={`p-3 rounded-lg text-center ${
                  isCurrentDay 
                    ? 'bg-primary-50 border border-primary-200' 
                    : 'bg-secondary-50'
                }`}
              >
                <p className={`text-xs font-medium ${
                  isCurrentDay ? 'text-primary-700' : 'text-secondary-500'
                }`}>
                  {format(day, 'EEE')}
                </p>
                <p className={`text-lg font-semibold ${
                  isCurrentDay ? 'text-primary-700' : 'text-secondary-900'
                }`}>
                  {format(day, 'd')}
                </p>
                <p className={`text-xs mt-1 ${
                  isCurrentDay ? 'text-primary-600' : 'text-secondary-600'
                }`}>
                  {timeStats.daily[index]}
                </p>
              </div>
            )
          })}
        </div>
        <div className="mt-4 pt-4 border-t border-secondary-100 grid grid-cols-1 sm:grid-cols-3 gap-4">
          <div className="bg-secondary-50 rounded-lg p-4">
            <h3 className="text-xs font-medium text-secondary-500 uppercase mb-1">Today</h3>
            <p className="text-2xl font-semibold text-secondary-900">{timeStats.today}</p>
          </div>
          <div className="bg-secondary-50 rounded-lg p-4">
            <h3 className="text-xs font-medium text-secondary-500 uppercase mb-1">This Week</h3>
            <p className="text-2xl font-semibold text-secondary-900">{timeStats.week}</p>
          </div>
          <div className="bg-secondary-50 rounded-lg p-4">
            <h3 className="text-xs font-medium text-secondary-500 uppercase mb-1">This Month</h3>
            <p className="text-2xl font-semibold text-secondary-900">{timeStats.month}</p>
          </div>
        </div>
      </div>
      <TimeTrackingWidget />
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-secondary-900">Recent Time Entries</h2>
          <div className="flex items-center space-x-2">
            <div className="relative">
              <select 
                value={selectedProjectId}
                onChange={(e) => setSelectedProjectId(e.target.value)}
                className="input pr-8 py-1.5 text-sm appearance-none"
              >
                <option value="">All Projects</option>
                {projects.map(p => (
                  <option key={p.id} value={p.id}>{p.name}</option>
                ))}
              </select>
              <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                <FiChevronDown className="h-4 w-4 text-secondary-400" />
              </div>
            </div>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <FiCalendar className="h-4 w-4 text-secondary-400" />
              </div>
              <select className="input pl-9 pr-8 py-1.5 text-sm">
                <option>Today</option>
                <option>Yesterday</option>
                <option>This Week</option>
                <option>Last Week</option>
                <option>This Month</option>
              </select>
            </div>
            <button className="p-1.5 rounded-lg text-secondary-500 hover:bg-secondary-100">
              <FiFilter className="h-5 w-5" />
            </button>
          </div>
        </div>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="h-5 w-5 text-secondary-400" />
          </div>
          <input
            type="text"
            placeholder="Search time entries..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input pl-10 w-full mb-4"
          />
        </div>
        {filteredTimeEntries.length > 0 ? (
          <div className="divide-y divide-secondary-100">
            {filteredTimeEntries.map(entry => {
              const { task, project } = getEntryInfo(entry)
              return (
                <div key={entry.id} className="py-3 flex items-center justify-between">
                  <div className="flex items-center">
                    <div 
                      className="w-10 h-10 rounded-lg flex items-center justify-center"
                      style={{ 
                        backgroundColor: project?.color ? `${project.color}20` : '#e0f2fe',
                        color: project?.color || '#0ea5e9'
                      }}
                    >
                      <FiClock className="h-5 w-5" />
                    </div>
                    <div className="ml-3">
                      <h3 className="font-medium text-secondary-900">{task?.title}</h3>
                      <div className="flex items-center text-xs text-secondary-500 mt-0.5">
                        <span>{project?.name}</span>
                        <span className="mx-1.5">•</span>
                        <span>
                          {format(new Date(entry.startTime), 'h:mm a')} - {entry.endTime ? format(new Date(entry.endTime), 'h:mm a') : 'Now'}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="font-medium text-secondary-900">
                      {formatDuration(entry.duration)}
                    </div>
                    <div className="text-xs text-secondary-500 mt-0.5">
                      {entry.notes || 'No notes'}
                    </div>
                  </div>
                  <button 
                    onClick={() => deleteTimeEntry(entry.id)}
                    className="ml-4 p-1 text-secondary-400 hover:text-red-500"
                    title="Delete Entry"
                  >
                    <FiTrash2 className="h-4 w-4" />
                  </button>
                </div>
              )
            })}
          </div>
        ) : (
          <div className="text-center py-8 bg-secondary-50 rounded-lg">
            <div className="w-16 h-16 mx-auto rounded-full bg-secondary-100 flex items-center justify-center text-secondary-400 mb-3">
              <FiClock className="h-8 w-8" />
            </div>
            <h3 className="text-secondary-900 font-medium mb-1">No time entries yet</h3>
            <p className="text-secondary-600 text-sm mb-4">
              Start tracking time on your tasks to see entries here
            </p>
            <button className="btn btn-primary inline-flex items-center">
              <FiPlay className="mr-1.5 h-4 w-4" />
              Start Timer
            </button>
          </div>
        )}
      </div>
    </div>
  )
}
export default TimeTracking
</file>

<file path="README.md">
# TaskFlow - Project Management Application

A clean, effective, and modern project management application that allows users to manage projects, nested tasks, and track time spent on activities.

## Features

- **Project Management**: Create and manage projects with detailed progress tracking
- **Task Management**: Organize tasks within projects with priority levels and status tracking
- **Time Tracking**: Track time spent on individual tasks with start/stop functionality
- **Reporting**: View analytics and reports on project progress and time spent

## Tech Stack

- **Frontend**: React.js with Tailwind CSS (via CDN)
- **Backend**: Node.js with Express
- **Database**: SQLite
- **Containerization**: Docker

## Running Locally with Docker

The application includes both a frontend and a backend service, containerized using Docker.

### Prerequisites

- Docker and Docker Compose installed on your machine

### Steps to Run

1. Clone this repository
2. Navigate to the project directory
3. Run the following command to build and start both the frontend and backend services:

```bash
docker-compose up -d --build
```

4. Access the application frontend at http://localhost (served by Nginx)
5. The backend API will be running on http://localhost:5001

### Stopping the Application

To stop the application and remove the containers, run:

```bash
docker-compose down
```

## Design Principles

- **Elegant Minimalism**: Perfect balance between aesthetics and functionality
- **Soft Gradients**: Refreshing color palette that creates a light, immersive experience
- **Clear Information Hierarchy**: Using subtle shadows and modular card layouts
- **Natural Focus**: Core functionalities are highlighted with refined visual elements

## Project Structure

- `/frontend`: React application (served via Nginx)
  - `/src`: Frontend source code
- `/backend`: Node.js/Express API
  - `/database.js`: SQLite database setup
  - `/routes`: API route definitions
  - `/server.js`: Express server configuration
- `docker-compose.yml`: Docker service definitions
- `Dockerfile`: Frontend Docker build instructions
</file>

<file path="backend/routes/timeEntries.js">
const express = require('express');
const router = express.Router();
const pool = require('../database.js'); // Use the exported pool
const crypto = require('crypto');
// Re-use the helper function for consistent error handling
const handleDatabaseError = (err, res, next) => {
  console.error('Database Error:', err.stack);
  if (process.env.NODE_ENV === 'production') {
    return res.status(500).json({ message: 'Internal Server Error' });
  }
  return next(err);
};
// Helper to calculate active duration
const calculateCurrentActiveDuration = async (client, entryId) => {
  const res = await client.query('SELECT "isPaused", "lastResumedAt", "totalPausedDuration" FROM time_entries WHERE id = $1', [entryId]);
  const entry = res.rows[0];
  let currentTotalPaused = parseFloat(entry.totalPausedDuration) || 0;
  let wasRunning = false;
  if (!entry.isPaused && entry.lastResumedAt) {
    wasRunning = true;
    // Calculate time since last resume in seconds
    const now = new Date();
    const lastResume = new Date(entry.lastResumedAt);
    const durationSinceResume = (now.getTime() - lastResume.getTime()) / 1000;
    currentTotalPaused += durationSinceResume;
  }
  return { updatedTotalPausedDuration: currentTotalPaused, wasRunning };
};
// GET /api/time-entries - Get all time entries (optionally filter by taskId or projectId)
router.get('/', async (req, res, next) => {
  const { taskId, projectId } = req.query;
  let sql = `SELECT te.*, t."projectId" 
             FROM time_entries te 
             JOIN tasks t ON te."taskId" = t.id`;
  const params = [];
  const conditions = [];
  let paramIndex = 1;
  if (taskId) {
    conditions.push(`te."taskId" = $${paramIndex++}`);
    params.push(taskId);
  }
  if (projectId) {
    conditions.push(`t."projectId" = $${paramIndex++}`);
    params.push(projectId);
  }
  if (conditions.length > 0) {
    sql += " WHERE " + conditions.join(" AND ");
  }
  sql += ' ORDER BY te."startTime" DESC'; // Use quotes
  try {
    const result = await pool.query(sql, params);
    res.json(result.rows);
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// GET /api/time-entries/:id - Get a single time entry
router.get('/:id', async (req, res, next) => {
  const sql = 'SELECT * FROM time_entries WHERE id = $1';
  try {
    const result = await pool.query(sql, [req.params.id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'Time entry not found' });
    }
    res.json(result.rows[0]);
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
// POST /api/time-entries/start - Start a new time entry
router.post('/start', async (req, res, next) => {
  const { taskId } = req.body;
  if (!taskId) {
    return res.status(400).json({ message: "Task ID is required" });
  }
  // TODO: Validate if taskId exists in the tasks table
  const id = crypto.randomUUID();
  const startTime = new Date(); // Use Date object for TIMESTAMPTZ
  // Use quotes for camelCase identifiers
  const sql = 'INSERT INTO time_entries (id, "taskId", "startTime", "isPaused", "lastResumedAt", "totalPausedDuration") VALUES ($1, $2, $3, false, $3, 0) RETURNING *';
  const params = [id, taskId, startTime];
  try {
    const result = await pool.query(sql, params);
    res.status(201).json(result.rows[0]);
  } catch (err) {
    // Handle potential foreign key violation if taskId doesn't exist
    if (err.code === '23503') { // Foreign key violation error code in PostgreSQL
      return res.status(400).json({ message: `Task with ID ${taskId} does not exist.` });
    }
    handleDatabaseError(err, res, next);
  }
});
// PUT /api/time-entries/stop/:id - Stop a running time entry
router.put('/stop/:id', async (req, res, next) => {
  const id = req.params.id;
  const endTime = new Date(); // Use Date object
  let client;
  try {
    client = await pool.connect(); // Get a client for transaction
    await client.query('BEGIN'); // Start transaction
    // Fetch the start time first to calculate duration, lock the row
    // Use quotes for camelCase identifiers
    const selectSql = 'SELECT "startTime", "isPaused", "lastResumedAt", "totalPausedDuration" FROM time_entries WHERE id = $1 AND "endTime" IS NULL FOR UPDATE';
    const selectResult = await client.query(selectSql, [id]);
    if (selectResult.rows.length === 0) {
      await client.query('ROLLBACK'); // Rollback transaction
      return res.status(404).json({ message: 'Active time entry not found or already stopped' });
    }
    const entry = selectResult.rows[0];
    let finalDuration = parseFloat(entry.totalPausedDuration) || 0;
    // If it was running, add the last segment's duration
    if (!entry.isPaused && entry.lastResumedAt) {
      const lastResume = new Date(entry.lastResumedAt);
      const durationSinceResume = (endTime.getTime() - lastResume.getTime()) / 1000;
      finalDuration += durationSinceResume;
    }
    // If it was paused, finalDuration already holds the accumulated time.
    // Use quotes for camelCase identifiers
    const updateSql = 'UPDATE time_entries SET "endTime" = $1, duration = $2, "isPaused" = false, "lastResumedAt" = NULL WHERE id = $3 RETURNING *';
    const updateParams = [endTime, finalDuration, id];
    const updateResult = await client.query(updateSql, updateParams);
    await client.query('COMMIT'); // Commit transaction
    res.json(updateResult.rows[0]); // Return the completed entry
  } catch (err) {
    if (client) {
      await client.query('ROLLBACK'); // Rollback transaction on error
    }
    handleDatabaseError(err, res, next);
  } finally {
    if (client) {
      client.release(); // Release client back to pool
    }
  }
});
// PUT /api/time-entries/pause/:id - Pause a running time entry
router.put('/pause/:id', async (req, res, next) => {
  const { id } = req.params;
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    // Lock the row
    const checkRes = await client.query('SELECT id, "endTime", "isPaused", "lastResumedAt", "totalPausedDuration" FROM time_entries WHERE id = $1 FOR UPDATE', [id]);
    if (checkRes.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ message: 'Time entry not found' });
    }
    const entry = checkRes.rows[0];
    if (entry.endTime !== null) {
      await client.query('ROLLBACK');
      return res.status(400).json({ message: 'Cannot pause a stopped entry' });
    }
    if (entry.isPaused) {
      await client.query('ROLLBACK');
      // Already paused, just return current state
      const fullEntry = await pool.query(
         'SELECT te.*, t.title as "taskTitle", p.name as "projectName", p.id as "projectId" FROM time_entries te JOIN tasks t ON te."taskId" = t.id JOIN projects p ON t."projectId" = p.id WHERE te.id = $1',
         [id]
      );
      return res.json(fullEntry.rows[0]);
    }
    // Calculate duration since last resume and update total paused duration
    const now = new Date();
    const lastResume = new Date(entry.lastResumedAt);
    const durationSinceResume = (now.getTime() - lastResume.getTime()) / 1000;
    const newTotalPausedDuration = (parseFloat(entry.totalPausedDuration) || 0) + durationSinceResume;
    const result = await client.query(
      'UPDATE time_entries SET "isPaused" = true, "lastResumedAt" = NULL, "totalPausedDuration" = $1 WHERE id = $2 RETURNING *',
      [newTotalPausedDuration, id]
    );
    await client.query('COMMIT');
    // Fetch details including project/task names for response
     const fullEntryRes = await pool.query(
         'SELECT te.*, t.title as "taskTitle", p.name as "projectName", p.id as "projectId" FROM time_entries te JOIN tasks t ON te."taskId" = t.id JOIN projects p ON t."projectId" = p.id WHERE te.id = $1',
         [id]
      );
    res.json(fullEntryRes.rows[0]);
  } catch (err) {
    console.error('Error pausing time entry:', err);
    await client.query('ROLLBACK');
    next(err);
  } finally {
    client.release();
  }
});
// PUT /api/time-entries/resume/:id - Resume a paused time entry
router.put('/resume/:id', async (req, res, next) => {
  const { id } = req.params;
  const resumeTime = new Date();
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
     // Lock the row
    const checkRes = await client.query('SELECT id, "endTime", "isPaused" FROM time_entries WHERE id = $1 FOR UPDATE', [id]);
    if (checkRes.rows.length === 0) {
      await client.query('ROLLBACK');
      return res.status(404).json({ message: 'Time entry not found' });
    }
    const entry = checkRes.rows[0];
    if (entry.endTime !== null) {
      await client.query('ROLLBACK');
      return res.status(400).json({ message: 'Cannot resume a stopped entry' });
    }
    if (!entry.isPaused) {
      await client.query('ROLLBACK');
       // Already running, just return current state
      const fullEntry = await pool.query(
         'SELECT te.*, t.title as "taskTitle", p.name as "projectName", p.id as "projectId" FROM time_entries te JOIN tasks t ON te."taskId" = t.id JOIN projects p ON t."projectId" = p.id WHERE te.id = $1',
         [id]
      );
      return res.json(fullEntry.rows[0]);
    }
    const result = await client.query(
      'UPDATE time_entries SET "isPaused" = false, "lastResumedAt" = $1 WHERE id = $2 RETURNING *',
      [resumeTime, id]
    );
    await client.query('COMMIT');
    // Fetch details including project/task names for response
     const fullEntryRes = await pool.query(
         'SELECT te.*, t.title as "taskTitle", p.name as "projectName", p.id as "projectId" FROM time_entries te JOIN tasks t ON te."taskId" = t.id JOIN projects p ON t."projectId" = p.id WHERE te.id = $1',
         [id]
      );
    res.json(fullEntryRes.rows[0]);
  } catch (err) {
    console.error('Error resuming time entry:', err);
    await client.query('ROLLBACK');
    next(err);
  } finally {
    client.release();
  }
});
// DELETE /api/time-entries/:id - Delete a time entry
router.delete('/:id', async (req, res, next) => {
  const sql = 'DELETE FROM time_entries WHERE id = $1';
  try {
    const result = await pool.query(sql, [req.params.id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ message: 'Time entry not found' });
    }
    res.status(200).json({ message: 'Time entry deleted successfully' });
  } catch (err) {
    handleDatabaseError(err, res, next);
  }
});
module.exports = router;
</file>

<file path="backend/database.js">
const { Pool } = require('pg');
// Check if DATABASE_URL is set, otherwise throw an error
if (!process.env.DATABASE_URL) {
  throw new Error('DATABASE_URL environment variable is not set.');
}
// Create a connection pool using the DATABASE_URL environment variable
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  // Add SSL configuration if required for your PostgreSQL setup (e.g., cloud providers)
  // ssl: {
  //   rejectUnauthorized: false // Use only for development/testing if needed
  // }
});
// Function to initialize the database tables
const initializeDatabase = async () => {
  const client = await pool.connect();
  try {
    console.log('Connected to the PostgreSQL database.');
    // Use TEXT for IDs if they are UUIDs or similar strings, VARCHAR otherwise.
    // Using VARCHAR(255) as a safe default if unsure.
    // Using TIMESTAMPTZ for dates to include timezone information.
    // Projects Table
    await client.query(`
      CREATE TABLE IF NOT EXISTS projects (
        id VARCHAR(255) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        client VARCHAR(255),
        color VARCHAR(7),
        "startDate" TIMESTAMPTZ, -- Use quotes for camelCase column names
        "dueDate" TIMESTAMPTZ,
        status VARCHAR(50) DEFAULT 'in-progress',
        "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('Checked/created projects table.');
    // Tasks Table
    await client.query(`
      CREATE TABLE IF NOT EXISTS tasks (
        id VARCHAR(255) PRIMARY KEY,
        "projectId" VARCHAR(255) NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        status VARCHAR(50) DEFAULT 'not-started',
        priority VARCHAR(50) DEFAULT 'medium',
        "dueDate" TIMESTAMPTZ,
        "estimatedHours" NUMERIC(10, 2),
        "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('Checked/created tasks table.');
    // Time Entries Table
    await client.query(`
      CREATE TABLE IF NOT EXISTS time_entries (
        id VARCHAR(255) PRIMARY KEY,
        "taskId" VARCHAR(255) NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
        "startTime" TIMESTAMPTZ NOT NULL,
        "endTime" TIMESTAMPTZ,
        duration NUMERIC(10, 2), -- Final duration in seconds
        notes TEXT,
        "isPaused" BOOLEAN DEFAULT false NOT NULL,          -- Track pause state
        "lastResumedAt" TIMESTAMPTZ,                       -- When the timer last started/resumed
        "totalPausedDuration" NUMERIC(12, 2) DEFAULT 0 NOT NULL, -- Accumulates paused time in seconds
        "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('Checked/created time_entries table.');
    // Add columns if they don't exist (for existing databases)
    // Normally, you'd use migration tools for this in production
    try {
      await client.query('ALTER TABLE time_entries ADD COLUMN IF NOT EXISTS "isPaused" BOOLEAN DEFAULT false NOT NULL');
      await client.query('ALTER TABLE time_entries ADD COLUMN IF NOT EXISTS "lastResumedAt" TIMESTAMPTZ');
      await client.query('ALTER TABLE time_entries ADD COLUMN IF NOT EXISTS "totalPausedDuration" NUMERIC(12, 2) DEFAULT 0 NOT NULL');
      console.log('Checked/added columns for pause functionality to time_entries.');
    } catch (alterErr) {
      console.error('Error adding columns to time_entries (may already exist):', alterErr.message);
    }
  } catch (err) {
    console.error('Error initializing database tables:', err.stack);
    // Decide if the application should exit if DB init fails
    // process.exit(1);
  } finally {
    client.release(); // Release the client back to the pool
  }
};
// Initialize the database on application start
initializeDatabase().catch(err => {
  console.error('Failed to initialize database connection pool:', err.stack);
  // process.exit(1); // Optionally exit if pool connection fails critically
});
// Export the pool for querying
module.exports = pool;
</file>

<file path="backend/package.json">
{
  "name": "taskflow-backend",
  "version": "1.0.0",
  "description": "Backend for TaskFlow project management application",
  "main": "server.js",
  "scripts": {
    "start": "nodemon server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "bcrypt": "^5.1.1",
    "better-sqlite3": "^11.9.1",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.21.2",
    "helmet": "^7.0.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "pg": "^8.14.1",
    "sequelize": "^6.33.0",
    "sqlite3": "^5.1.7"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}
</file>

<file path="frontend/src/context/ProjectContext.jsx">
import { createContext, useState, useContext, useEffect, useMemo } from 'react'
import { formatDistanceToNow } from 'date-fns'
// Define the base URL for the API - Use relative path for proxy
const API_BASE_URL = '/api' // Rely on Nginx proxy in Docker
const ProjectContext = createContext()
export const useProjects = () => useContext(ProjectContext)
export const ProjectProvider = ({ children }) => {
  const [projects, setProjects] = useState([])
  const [tasks, setTasks] = useState([])
  const [timeEntries, setTimeEntries] = useState([])
  const [loading, setLoading] = useState(true) // Add loading state
  const [error, setError] = useState(null) // Add error state
  // --- Data Fetching ---
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      setError(null)
      try {
        const [projectsRes, tasksRes, timeEntriesRes] = await Promise.all([
          fetch(`${API_BASE_URL}/projects`),
          fetch(`${API_BASE_URL}/tasks`),
          fetch(`${API_BASE_URL}/time-entries`)
        ])
        if (!projectsRes.ok || !tasksRes.ok || !timeEntriesRes.ok) {
          throw new Error('Failed to fetch initial data')
        }
        const projectsData = await projectsRes.json()
        const tasksData = await tasksRes.json()
        const timeEntriesData = await timeEntriesRes.json()
        setProjects(projectsData)
        setTasks(tasksData)
        setTimeEntries(timeEntriesData)
      } catch (err) {
        console.error("Error fetching data:", err)
        setError(err.message || 'Could not load data. Please try again later.')
        // Keep existing state or clear it depending on desired UX
        // setProjects([]); setTasks([]); setTimeEntries([]); 
      } finally {
        setLoading(false)
      }
    }
    fetchData()
  }, []) // Empty dependency array means this runs once on mount
  // --- Helper Functions (Consider moving to a utils file later) ---
  const apiRequest = async (url, options = {}) => {
    try {
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
        ...options,
      });
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ message: response.statusText }))
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`)
      }
      // If response has content, parse it, otherwise return success status
      const contentType = response.headers.get("content-type");
      if (contentType && contentType.indexOf("application/json") !== -1) {
         return { success: true, data: await response.json() };
      } else {
         return { success: true }; // For DELETE or other requests with no body response
      }
    } catch (err) {
      console.error('API Request Error:', err);
      return { success: false, message: err.message };
    }
  };
  // --- Project CRUD ---
  const createProject = async (projectData) => {
    const result = await apiRequest(`${API_BASE_URL}/projects`, {
      method: 'POST',
      body: JSON.stringify(projectData),
    });
    if (result.success) {
      setProjects(prev => [result.data, ...prev])
    }
    return result
  }
  const updateProject = async (id, projectData) => {
    // Only send fields that are being updated (backend handles this)
    const result = await apiRequest(`${API_BASE_URL}/projects/${id}`, {
      method: 'PUT',
      body: JSON.stringify(projectData),
    });
    if (result.success) {
      setProjects(prev => prev.map(p => p.id === id ? result.data : p))
    }
    return result
  }
  const deleteProject = async (id) => {
    const result = await apiRequest(`${API_BASE_URL}/projects/${id}`, {
      method: 'DELETE',
    });
    if (result.success) {
      setProjects(prev => prev.filter(p => p.id !== id))
      // Remove associated tasks and time entries from frontend state
      const tasksToDelete = tasks.filter(t => t.projectId === id).map(t => t.id);
      setTasks(prev => prev.filter(t => t.projectId !== id));
      setTimeEntries(prev => prev.filter(te => !tasksToDelete.includes(te.taskId)));
    }
    return result
  }
  // --- Task CRUD ---
  const createTask = async (taskData) => {
    const result = await apiRequest(`${API_BASE_URL}/tasks`, {
      method: 'POST',
      body: JSON.stringify(taskData),
    });
    if (result.success) {
      setTasks(prev => [result.data, ...prev])
    }
    return result
  }
  const updateTask = async (id, taskData) => {
    const result = await apiRequest(`${API_BASE_URL}/tasks/${id}`, {
      method: 'PUT',
      body: JSON.stringify(taskData),
    });
    if (result.success) {
      setTasks(prev => prev.map(t => t.id === id ? result.data : t))
    }
    return result
  }
  const deleteTask = async (id) => {
    const result = await apiRequest(`${API_BASE_URL}/tasks/${id}`, {
      method: 'DELETE',
    });
    if (result.success) {
      setTasks(prev => prev.filter(t => t.id !== id))
      // Remove associated time entries from frontend state
      setTimeEntries(prev => prev.filter(te => te.taskId !== id));
    }
    return result
  }
  // --- Time Tracking ---
  const startTimeTracking = async (taskId) => {
    // Optional: Check if another timer is already running and stop it?
    // const runningTimer = timeEntries.find(te => te.endTime === null);
    // if (runningTimer) { await stopTimeTracking(runningTimer.id); }
    const result = await apiRequest(`${API_BASE_URL}/time-entries/start`, {
      method: 'POST',
      body: JSON.stringify({ taskId }),
    });
    if (result.success) {
      setTimeEntries(prev => [result.data, ...prev.filter(te => te.endTime !== null)]) // Add new, remove any other potentially active ones just in case
    }
    return result
  }
  const stopTimeTracking = async (timeEntryId) => {
    const result = await apiRequest(`${API_BASE_URL}/time-entries/stop/${timeEntryId}`, {
      method: 'PUT',
    });
    if (result.success) {
      // Replace the entry with the updated one from the server
      setTimeEntries(prev => prev.map(te => te.id === timeEntryId ? result.data : te))
    }
    return result
  }
  const pauseTimeTracking = async (timeEntryId) => {
    const result = await apiRequest(`${API_BASE_URL}/time-entries/pause/${timeEntryId}`, {
      method: 'PUT',
    });
    if (result.success) {
      setTimeEntries(prev => prev.map(te => te.id === timeEntryId ? result.data : te))
    }
    return result;
  };
  const resumeTimeTracking = async (timeEntryId) => {
    const result = await apiRequest(`${API_BASE_URL}/time-entries/resume/${timeEntryId}`, {
      method: 'PUT',
    });
    if (result.success) {
      setTimeEntries(prev => prev.map(te => te.id === timeEntryId ? result.data : te))
    }
    return result;
  };
  const deleteTimeEntry = async (id) => {
    const result = await apiRequest(`${API_BASE_URL}/time-entries/${id}`, {
        method: 'DELETE',
    });
    if (result.success) {
        setTimeEntries(prev => prev.filter(te => te.id !== id));
    }
    return result;
  };
  // --- Calculated Values (Memoized) ---
  const projectStats = useMemo(() => {
    return projects.reduce((acc, project) => {
      const projectTasks = tasks.filter(task => task.projectId === project.id)
      const completedTasks = projectTasks.filter(task => task.status === 'completed').length
      const projectTimeEntries = timeEntries.filter(entry => 
        projectTasks.some(task => task.id === entry.taskId) && entry.duration
      )
      const totalHours = projectTimeEntries.reduce((sum, entry) => sum + (entry.duration || 0), 0) / 3600 // Assuming duration is in seconds
      acc[project.id] = {
        totalTasks: projectTasks.length,
        completedTasks: completedTasks,
        totalHours: parseFloat(totalHours.toFixed(1)),
        progress: projectTasks.length > 0 ? Math.round((completedTasks / projectTasks.length) * 100) : 0
      }
      return acc
    }, {})
  }, [projects, tasks, timeEntries])
  const totalTrackedHours = useMemo(() => {
    return timeEntries.reduce((sum, entry) => sum + (entry.duration || 0), 0) / 3600 // Assuming duration is in seconds
  }, [timeEntries])
  const recentActivity = useMemo(() => {
    // Combine and sort projects, tasks, time entries by creation/update time (if available)
    // This is a simplified version. A real implementation might need dedicated timestamp fields.
    const activities = [
      ...projects.map(p => ({ ...p, type: 'project', date: p.createdAt || new Date(0) })),
      ...tasks.map(t => ({ ...t, type: 'task', date: t.createdAt || new Date(0) })),
      // ...timeEntries.map(te => ({ ...te, type: 'time', date: te.createdAt || new Date(0) }))
    ].sort((a, b) => new Date(b.date) - new Date(a.date)); 
    // Format for display
    return activities.slice(0, 5).map(activity => {
        let action = 'created'; // Default
        // Add logic here if you have update timestamps
        const timeAgo = formatDistanceToNow(new Date(activity.date), { addSuffix: true });
        switch (activity.type) {
            case 'project':
                return `Project "${activity.name}" ${action} ${timeAgo}`;
            case 'task':
                const projectName = projects.find(p => p.id === activity.projectId)?.name || 'a project';
                return `Task "${activity.title}" ${action} in ${projectName} ${timeAgo}`;
            // Add time entry case if needed
            default:
                return `Activity ${timeAgo}`;
        }
    });
}, [projects, tasks, timeEntries]);
  return (
    <ProjectContext.Provider value={{
      projects,
      tasks,
      timeEntries,
      loading, // Provide loading state
      error, // Provide error state
      createProject,
      updateProject,
      deleteProject,
      createTask,
      updateTask,
      deleteTask,
      startTimeTracking,
      stopTimeTracking,
      pauseTimeTracking,
      resumeTimeTracking,
      deleteTimeEntry, // Provide deleteTimeEntry
      projectStats,
      totalTrackedHours,
      recentActivity
    }}>
      {children}
    </ProjectContext.Provider>
  )
}
</file>

<file path=".windsurfrules">
### 🔄 Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before starting a new task. If the task isn’t listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

### 🧱 Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### 🧪 Testing & Reliability
- **Always create Pytest unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ✅ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a “Discovered During Work” section.

### 📎 Style & Conventions
- **Use Python** as the primary language.
- **Follow PEP8**, use type hints, and format with `black`.
- **Use `pydantic` for data validation**.
- Use `FastAPI` for APIs and `SQLAlchemy` or `SQLModel` for ORM if applicable.
- Write **docstrings for every function** using the Google style:
  ```python
  def example():
      """
      Brief summary.

      Args:
          param1 (type): Description.

      Returns:
          type: Description.
      """
  ```

### 📚 Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.

### 🧠 AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** – only use known, verified Python packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.
</file>

<file path="docker-compose.yml">
version: '3.8'
services:
  taskflow-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    restart: unless-stopped
    container_name: taskflow-frontend
  postgres:
    image: postgres:16-alpine # Use a specific version
    container_name: taskflow-postgres
    environment:
      POSTGRES_DB: taskflow_db
      POSTGRES_USER: taskflow_user
      POSTGRES_PASSWORD: taskflow_password # Use a more secure password in production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Optional: Expose port for direct access if needed
    restart: unless-stopped
  taskflow-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app # Mount host code for development (hot-reloading)
      - /app/node_modules # Exclude host node_modules, use container's
    working_dir: /app
    command: npm start
    restart: unless-stopped
    container_name: taskflow-backend
    environment:
      DATABASE_URL: postgresql://taskflow_user:taskflow_password@postgres:5432/taskflow_db
      NODE_ENV: development # Or production as needed
      PORT: 5001
    depends_on:
      - postgres # Ensure postgres starts before backend
volumes:
  postgres_data:
</file>

<file path="frontend/src/pages/ProjectDetail.jsx">
import { useState, useEffect } from 'react'
import { useParams, Link, useNavigate } from 'react-router-dom'
import { useProjects } from '../context/ProjectContext'
import { FiChevronLeft, FiEdit2, FiTrash2, FiPlus, FiClock, FiCalendar, FiCheckCircle, FiX } from 'react-icons/fi'
import { format } from 'date-fns'
// Components
import TaskItem from '../components/tasks/TaskItem'
const ProjectDetail = () => {
  const { id } = useParams()
  const navigate = useNavigate()
  const { projects, tasks, loading, updateProject, deleteProject, createTask } = useProjects()
  const [project, setProject] = useState(null)
  const [projectTasks, setProjectTasks] = useState([])
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false)
  const [showAddTaskModal, setShowAddTaskModal] = useState(false)
  const [showEditProjectModal, setShowEditProjectModal] = useState(false)
  const [editableProject, setEditableProject] = useState(null)
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    status: 'not-started',
    priority: 'medium',
    dueDate: '',
    estimatedHours: 0
  })
  const [stats, setStats] = useState({
    totalTasks: 0,
    completedTasks: 0,
    inProgressTasks: 0,
    totalHours: 0
  })
  useEffect(() => {
    if (!loading) {
      const foundProject = projects.find(p => p.id === id)
      setProject(foundProject)
      if (foundProject) {
        setEditableProject({ ...foundProject }) // Set editable copy
        // Get tasks for this project
        const filteredTasks = tasks.filter(task => task.projectId === id)
        setProjectTasks(filteredTasks)
        // Calculate stats
        const completed = filteredTasks.filter(task => task.status === 'completed').length
        const inProgress = filteredTasks.filter(task => task.status === 'in-progress').length
        const totalHours = filteredTasks.reduce((sum, task) => sum + (task.estimatedHours || 0), 0)
        setStats({
          totalTasks: filteredTasks.length,
          completedTasks: completed,
          inProgressTasks: inProgress,
          totalHours
        })
      } else {
        // Project not found, reset tasks and stats
        setProjectTasks([])
        setStats({
          totalTasks: 0,
          completedTasks: 0,
          inProgressTasks: 0,
          totalHours: 0
        })
      }
    }
  }, [id, projects, tasks, loading])
  const handleDeleteProject = async () => {
    const result = await deleteProject(id)
    if (result.success) {
      navigate('/projects')
    }
  }
  const handleOpenEditModal = () => {
    setEditableProject({ ...project }) // Ensure we edit a copy
    setShowEditProjectModal(true)
  }
  const handleUpdateProject = async (e) => {
    e.preventDefault()
    if (!editableProject) return
    const result = await updateProject(id, editableProject)
    if (result.success) {
      setProject(result.data) // Use data returned from context API call
      setShowEditProjectModal(false)
    } else {
      // Handle error (e.g., show a notification)
      console.error('Failed to update project:', result.message)
    }
  }
  // Loading state
  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto"></div>
          <p className="mt-3 text-secondary-600">Loading project details...</p>
        </div>
      </div>
    );
  }
  // Project Not Found state
  if (!project) {
    return (
      <div className="text-center py-16">
        <h2 className="text-xl font-semibold text-secondary-800 mb-2">Project Not Found</h2>
        <p className="text-secondary-600 mb-4">The project you are looking for does not exist.</p>
        <Link to="/projects" className="btn btn-primary">
          Go Back to Projects
        </Link>
      </div>
    );
  }
  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <Link to="/projects" className="inline-flex items-center text-sm text-secondary-600 hover:text-secondary-900">
            <FiChevronLeft className="mr-1 h-4 w-4" />
            Back to Projects
          </Link>
          <h1 className="text-2xl font-semibold text-secondary-900 mt-1">{project.name}</h1>
          <div className="flex items-center mt-1">
            <span className="text-sm text-secondary-600">{project.client}</span>
            <span className="mx-2 text-secondary-300">•</span>
            <span 
              className="px-2 py-0.5 text-xs rounded-full"
              style={{ 
                backgroundColor: `${project.color || '#0ea5e9'}20`,
                color: project.color || '#0ea5e9'
              }}
            >
              {project.status === 'completed' ? 'Completed' : project.status === 'in-progress' ? 'In Progress' : 'Not Started'}
            </span>
          </div>
        </div>
        <div className="flex space-x-2">
          <button 
            onClick={handleOpenEditModal}
            className="btn btn-secondary flex items-center"
          >
            <FiEdit2 className="mr-1.5 h-4 w-4" />
            Edit
          </button>
          <button 
            onClick={() => setShowDeleteConfirm(true)}
            className="btn bg-red-50 text-red-600 border border-red-200 hover:bg-red-100 flex items-center"
          >
            <FiTrash2 className="mr-1.5 h-4 w-4" />
            Delete
          </button>
        </div>
      </div>
      {/* Project Info */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="md:col-span-2 card">
          <h2 className="text-lg font-medium text-secondary-900 mb-2">Description</h2>
          <p className="text-secondary-700">
            {project.description || 'No description provided.'}
          </p>
          <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mt-6">
            <div>
              <h3 className="text-xs font-medium text-secondary-500 uppercase">Start Date</h3>
              <div className="flex items-center mt-1">
                <FiCalendar className="h-4 w-4 text-secondary-400 mr-1.5" />
                <span className="text-sm text-secondary-900">
                  {project.startDate ? format(new Date(project.startDate), 'MMM d, yyyy') : 'Not set'}
                </span>
              </div>
            </div>
            <div>
              <h3 className="text-xs font-medium text-secondary-500 uppercase">Due Date</h3>
              <div className="flex items-center mt-1">
                <FiCalendar className="h-4 w-4 text-secondary-400 mr-1.5" />
                <span className="text-sm text-secondary-900">
                  {project.dueDate ? format(new Date(project.dueDate), 'MMM d, yyyy') : 'Not set'}
                </span>
              </div>
            </div>
            <div>
              <h3 className="text-xs font-medium text-secondary-500 uppercase">Estimated Hours</h3>
              <div className="flex items-center mt-1">
                <FiClock className="h-4 w-4 text-secondary-400 mr-1.5" />
                <span className="text-sm text-secondary-900">{stats.totalHours} hours</span>
              </div>
            </div>
            <div>
              <h3 className="text-xs font-medium text-secondary-500 uppercase">Completion</h3>
              <div className="flex items-center mt-1">
                <FiCheckCircle className="h-4 w-4 text-secondary-400 mr-1.5" />
                <span className="text-sm text-secondary-900">
                  {stats.totalTasks > 0 
                    ? `${Math.round((stats.completedTasks / stats.totalTasks) * 100)}%` 
                    : '0%'}
                </span>
              </div>
            </div>
          </div>
        </div>
        <div className="card">
          <h2 className="text-lg font-medium text-secondary-900 mb-4">Progress</h2>
          <div className="space-y-4">
            <div>
              <div className="flex justify-between text-sm mb-1">
                <span className="text-secondary-700">Overall Progress</span>
                <span className="font-medium text-secondary-900">
                  {stats.totalTasks > 0 
                    ? `${Math.round((stats.completedTasks / stats.totalTasks) * 100)}%` 
                    : '0%'}
                </span>
              </div>
              <div className="w-full bg-secondary-100 rounded-full h-2">
                <div 
                  className="h-2 rounded-full" 
                  style={{ 
                    width: `${stats.totalTasks > 0 ? (stats.completedTasks / stats.totalTasks) * 100 : 0}%`,
                    backgroundColor: project.color || '#0ea5e9'
                  }}
                ></div>
              </div>
            </div>
            <div className="grid grid-cols-2 gap-2 pt-2">
              <div className="bg-secondary-50 rounded-lg p-3 text-center">
                <p className="text-2xl font-semibold text-secondary-900">{stats.completedTasks}</p>
                <p className="text-xs text-secondary-500 mt-1">Completed</p>
              </div>
              <div className="bg-secondary-50 rounded-lg p-3 text-center">
                <p className="text-2xl font-semibold text-secondary-900">{stats.inProgressTasks}</p>
                <p className="text-xs text-secondary-500 mt-1">In Progress</p>
              </div>
              <div className="bg-secondary-50 rounded-lg p-3 text-center">
                <p className="text-2xl font-semibold text-secondary-900">
                  {stats.totalTasks - stats.completedTasks - stats.inProgressTasks}
                </p>
                <p className="text-xs text-secondary-500 mt-1">Not Started</p>
              </div>
              <div className="bg-secondary-50 rounded-lg p-3 text-center">
                <p className="text-2xl font-semibold text-secondary-900">{stats.totalTasks}</p>
                <p className="text-xs text-secondary-500 mt-1">Total Tasks</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Tasks */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-secondary-900">Tasks</h2>
          <button 
            onClick={() => setShowAddTaskModal(true)}
            className="btn btn-primary flex items-center"
          >
            <FiPlus className="mr-1.5 h-4 w-4" />
            Add Task
          </button>
        </div>
        {projectTasks.length > 0 ? (
          <div className="divide-y divide-secondary-100">
            {projectTasks.map(task => (
              <TaskItem key={task.id} task={task} />
            ))}
          </div>
        ) : (
          <div className="text-center py-8 bg-secondary-50 rounded-lg">
            <p className="text-secondary-600 mb-3">No tasks yet</p>
            <button 
              onClick={() => setShowAddTaskModal(true)}
              className="btn btn-primary inline-flex items-center"
            >
              <FiPlus className="mr-1.5 h-4 w-4" />
              Create Task
            </button>
          </div>
        )}
      </div>
      {/* Add Task Modal */}
      {showAddTaskModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div className="flex justify-between items-center p-4 border-b border-secondary-100">
              <h3 className="text-lg font-medium text-secondary-900">Add New Task</h3>
              <button 
                onClick={() => setShowAddTaskModal(false)}
                className="text-secondary-500 hover:text-secondary-700"
              >
                <FiX className="h-5 w-5" />
              </button>
            </div>
            <div className="p-4">
              <form onSubmit={async (e) => {
                e.preventDefault()
                const result = await createTask({
                  ...newTask,
                  projectId: id
                })
                if (result.success) {
                  setShowAddTaskModal(false)
                  setNewTask({
                    title: '',
                    description: '',
                    status: 'not-started',
                    priority: 'medium',
                    dueDate: '',
                    estimatedHours: 0
                  })
                }
              }}>
                <div className="space-y-4">
                  <div>
                    <label htmlFor="title" className="block text-sm font-medium text-secondary-700 mb-1">
                      Task Title *
                    </label>
                    <input
                      type="text"
                      id="title"
                      value={newTask.title}
                      onChange={(e) => setNewTask({...newTask, title: e.target.value})}
                      className="input w-full"
                      required
                    />
                  </div>
                  <div>
                    <label htmlFor="description" className="block text-sm font-medium text-secondary-700 mb-1">
                      Description
                    </label>
                    <textarea
                      id="description"
                      value={newTask.description}
                      onChange={(e) => setNewTask({...newTask, description: e.target.value})}
                      className="input w-full h-24"
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="status" className="block text-sm font-medium text-secondary-700 mb-1">
                        Status
                      </label>
                      <select
                        id="status"
                        value={newTask.status}
                        onChange={(e) => setNewTask({...newTask, status: e.target.value})}
                        className="input w-full"
                      >
                        <option value="not-started">Not Started</option>
                        <option value="in-progress">In Progress</option>
                        <option value="completed">Completed</option>
                      </select>
                    </div>
                    <div>
                      <label htmlFor="priority" className="block text-sm font-medium text-secondary-700 mb-1">
                        Priority
                      </label>
                      <select
                        id="priority"
                        value={newTask.priority}
                        onChange={(e) => setNewTask({...newTask, priority: e.target.value})}
                        className="input w-full"
                      >
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                      </select>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="dueDate" className="block text-sm font-medium text-secondary-700 mb-1">
                        Due Date
                      </label>
                      <input
                        type="date"
                        id="dueDate"
                        value={newTask.dueDate}
                        onChange={(e) => setNewTask({...newTask, dueDate: e.target.value})}
                        className="input w-full"
                      />
                    </div>
                    <div>
                      <label htmlFor="estimatedHours" className="block text-sm font-medium text-secondary-700 mb-1">
                        Estimated Hours
                      </label>
                      <input
                        type="number"
                        id="estimatedHours"
                        min="0"
                        step="0.5"
                        value={newTask.estimatedHours}
                        onChange={(e) => setNewTask({...newTask, estimatedHours: parseFloat(e.target.value) || 0})}
                        className="input w-full"
                      />
                    </div>
                  </div>
                </div>
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowAddTaskModal(false)}
                    className="btn btn-secondary"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                  >
                    Add Task
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
      {/* Edit Project Modal */}
      {showEditProjectModal && editableProject && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div className="flex justify-between items-center p-4 border-b border-secondary-100">
              <h3 className="text-lg font-medium text-secondary-900">Edit Project</h3>
              <button 
                onClick={() => setShowEditProjectModal(false)}
                className="text-secondary-500 hover:text-secondary-700"
              >
                <FiX className="h-5 w-5" />
              </button>
            </div>
            <div className="p-4 max-h-[80vh] overflow-y-auto">
              <form onSubmit={handleUpdateProject}>
                <div className="space-y-4">
                  <div>
                    <label htmlFor="edit-name" className="block text-sm font-medium text-secondary-700 mb-1">
                      Project Name *
                    </label>
                    <input
                      type="text"
                      id="edit-name"
                      value={editableProject.name}
                      onChange={(e) => setEditableProject({...editableProject, name: e.target.value})}
                      className="input w-full"
                      required
                    />
                  </div>
                  <div>
                    <label htmlFor="edit-description" className="block text-sm font-medium text-secondary-700 mb-1">
                      Description
                    </label>
                    <textarea
                      id="edit-description"
                      value={editableProject.description}
                      onChange={(e) => setEditableProject({...editableProject, description: e.target.value})}
                      className="input w-full h-24"
                    />
                  </div>
                  <div>
                    <label htmlFor="edit-client" className="block text-sm font-medium text-secondary-700 mb-1">
                      Client
                    </label>
                    <input
                      type="text"
                      id="edit-client"
                      value={editableProject.client}
                      onChange={(e) => setEditableProject({...editableProject, client: e.target.value})}
                      className="input w-full"
                    />
                  </div>
                  <div>
                    <label htmlFor="edit-color" className="block text-sm font-medium text-secondary-700 mb-1">
                      Color
                    </label>
                    <input
                      type="color"
                      id="edit-color"
                      value={editableProject.color}
                      onChange={(e) => setEditableProject({...editableProject, color: e.target.value})}
                      className="h-10 w-full rounded-md border border-secondary-200 p-1"
                    />
                  </div>
                  <div>
                    <label htmlFor="edit-status" className="block text-sm font-medium text-secondary-700 mb-1">
                      Status
                    </label>
                    <select
                      id="edit-status"
                      value={editableProject.status}
                      onChange={(e) => setEditableProject({...editableProject, status: e.target.value})}
                      className="input w-full"
                    >
                      <option value="not-started">Not Started</option>
                      <option value="in-progress">In Progress</option>
                      <option value="completed">Completed</option>
                    </select>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="edit-startDate" className="block text-sm font-medium text-secondary-700 mb-1">
                        Start Date
                      </label>
                      <input
                        type="date"
                        id="edit-startDate"
                        value={editableProject.startDate}
                        onChange={(e) => setEditableProject({...editableProject, startDate: e.target.value})}
                        className="input w-full"
                      />
                    </div>
                    <div>
                      <label htmlFor="edit-dueDate" className="block text-sm font-medium text-secondary-700 mb-1">
                        Due Date
                      </label>
                      <input
                        type="date"
                        id="edit-dueDate"
                        value={editableProject.dueDate}
                        onChange={(e) => setEditableProject({...editableProject, dueDate: e.target.value})}
                        className="input w-full"
                      />
                    </div>
                  </div>
                </div>
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowEditProjectModal(false)}
                    className="btn btn-secondary"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                  >
                    Save Changes
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-secondary-900 mb-2">Delete Project</h3>
            <p className="text-secondary-600 mb-4">
              Are you sure you want to delete this project? This action cannot be undone and all associated tasks and time entries will be deleted.
            </p>
            <div className="flex space-x-3 justify-end">
              <button 
                onClick={() => setShowDeleteConfirm(false)}
                className="btn btn-secondary"
              >
                Cancel
              </button>
              <button 
                onClick={handleDeleteProject}
                className="btn bg-red-500 text-white hover:bg-red-600"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
export default ProjectDetail
</file>

<file path="frontend/src/pages/Projects.jsx">
import { useState, useMemo } from 'react'
import { Link } from 'react-router-dom'
import { useProjects } from '../context/ProjectContext'
import { FiPlus, FiFilter, FiSearch, FiX } from 'react-icons/fi'
// Components
import ProjectCard from '../components/projects/ProjectCard'
const Projects = () => {
  const { projects, loading, createProject } = useProjects()
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedClient, setSelectedClient] = useState('')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [newProject, setNewProject] = useState({
    name: '',
    description: '',
    client: '',
    color: '#0ea5e9',
    startDate: '',
    dueDate: ''
  })
  // Get unique client names for the filter dropdown
  const uniqueClients = useMemo(() => {
    const clients = new Set(projects.map(p => p.client).filter(Boolean))
    return ['', ...Array.from(clients).sort()]
  }, [projects])
  // Filter projects based on search term and selected client
  const filteredProjects = projects.filter(project => 
    project.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
    (selectedClient === '' || project.client === selectedClient)
  )
  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto"></div>
          <p className="mt-3 text-secondary-600">Loading projects...</p>
        </div>
      </div>
    )
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-secondary-900">Projects</h1>
        <button
          onClick={() => setShowCreateModal(true)}
          className="btn btn-primary flex items-center"
        >
          <FiPlus className="mr-1.5 h-4 w-4" />
          New Project
        </button>
      </div>
      {/* Search and Filter */}
      <div className="flex flex-col sm:flex-row gap-3">
        <div className="relative flex-1">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FiSearch className="h-5 w-5 text-secondary-400" />
          </div>
          <input
            type="text"
            placeholder="Search projects..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input pl-10 w-full"
          />
        </div>
        <div className="relative sm:w-48">
          <select 
            id="client-filter"
            value={selectedClient}
            onChange={(e) => setSelectedClient(e.target.value)}
            className="input w-full appearance-none pr-8"
            aria-label="Filter by client"
          >
            <option value="">All Clients</option>
            {uniqueClients.slice(1).map(client => (
              <option key={client} value={client}>{client}</option>
            ))}
          </select>
          <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
            <svg className="h-5 w-5 text-secondary-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.25 4.25a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.06z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      </div>
      {/* Projects Grid */}
      {filteredProjects.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredProjects.map(project => (
            <ProjectCard key={project.id} project={project} />
          ))}
        </div>
      ) : (
        <div className="text-center py-12 bg-secondary-50 rounded-xl">
          <div className="w-16 h-16 mx-auto rounded-full bg-secondary-100 flex items-center justify-center text-secondary-400 mb-3">
            <FiPlus className="h-8 w-8" />
          </div>
          <h3 className="text-secondary-900 font-medium mb-1">No projects found</h3>
          <p className="text-secondary-600 text-sm mb-4">
            {searchTerm || selectedClient ? 'Try adjusting your search or filter' : 'Create your first project to get started'}
          </p>
          {!searchTerm && !selectedClient && (
            <button 
              onClick={() => setShowCreateModal(true)}
              className="btn btn-primary inline-flex items-center"
            >
              <FiPlus className="mr-1.5 h-4 w-4" />
              Create Project
            </button>
          )}
        </div>
      )}
      {/* Create Project Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl w-full max-w-md overflow-hidden">
            <div className="flex justify-between items-center p-4 border-b border-secondary-100">
              <h3 className="text-lg font-medium text-secondary-900">Create New Project</h3>
              <button 
                onClick={() => setShowCreateModal(false)}
                className="text-secondary-500 hover:text-secondary-700"
              >
                <FiX className="h-5 w-5" />
              </button>
            </div>
            <div className="p-4">
              <form onSubmit={async (e) => {
                e.preventDefault()
                const result = await createProject(newProject)
                if (result.success) {
                  setShowCreateModal(false)
                  setNewProject({
                    name: '',
                    description: '',
                    client: '',
                    color: '#0ea5e9',
                    startDate: '',
                    dueDate: ''
                  })
                }
              }}>
                <div className="space-y-4">
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-secondary-700 mb-1">
                      Project Name *
                    </label>
                    <input
                      type="text"
                      id="name"
                      value={newProject.name}
                      onChange={(e) => setNewProject({...newProject, name: e.target.value})}
                      className="input w-full"
                      required
                    />
                  </div>
                  <div>
                    <label htmlFor="description" className="block text-sm font-medium text-secondary-700 mb-1">
                      Description
                    </label>
                    <textarea
                      id="description"
                      value={newProject.description}
                      onChange={(e) => setNewProject({...newProject, description: e.target.value})}
                      className="input w-full h-24"
                    />
                  </div>
                  <div>
                    <label htmlFor="client" className="block text-sm font-medium text-secondary-700 mb-1">
                      Client
                    </label>
                    <input
                      type="text"
                      id="client"
                      value={newProject.client}
                      onChange={(e) => setNewProject({...newProject, client: e.target.value})}
                      className="input w-full"
                    />
                  </div>
                  <div>
                    <label htmlFor="color" className="block text-sm font-medium text-secondary-700 mb-1">
                      Color
                    </label>
                    <input
                      type="color"
                      id="color"
                      value={newProject.color}
                      onChange={(e) => setNewProject({...newProject, color: e.target.value})}
                      className="h-10 w-full rounded-md border border-secondary-200 p-1"
                    />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="startDate" className="block text-sm font-medium text-secondary-700 mb-1">
                        Start Date
                      </label>
                      <input
                        type="date"
                        id="startDate"
                        value={newProject.startDate}
                        onChange={(e) => setNewProject({...newProject, startDate: e.target.value})}
                        className="input w-full"
                      />
                    </div>
                    <div>
                      <label htmlFor="dueDate" className="block text-sm font-medium text-secondary-700 mb-1">
                        Due Date
                      </label>
                      <input
                        type="date"
                        id="dueDate"
                        value={newProject.dueDate}
                        onChange={(e) => setNewProject({...newProject, dueDate: e.target.value})}
                        className="input w-full"
                      />
                    </div>
                  </div>
                </div>
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowCreateModal(false)}
                    className="btn btn-secondary"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="btn btn-primary"
                  >
                    Create Project
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
export default Projects
</file>

</files>
